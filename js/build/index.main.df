#lang ll
parts {
  "Admin" = interact {
    intiConfig = IT_Val Object({"ADMIN": Address, "comment": Bytes(200), "configuration": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "loanTerms_info": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])})
    },
  "Admin_api_acceptOffer" = interact {
    in = IT_Fun [] Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})),
    out = IT_Fun [Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})),Null] Null
    },
  "Admin_api_cancelLoanOfferandWithdrawCollateral" = interact {
    in = IT_Fun [] Tuple(UInt),
    out = IT_Fun [Tuple(UInt),Null] Null
    },
  "Admin_api_freeze" = interact {
    in = IT_Fun [] Tuple(Bool),
    out = IT_Fun [Tuple(Bool),Null] Null
    },
  "Admin_api_updateConfig" = interact {
    in = IT_Fun [] Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])),
    out = IT_Fun [Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])),Null] Null
    },
  "Admin_api_updateLoanTerms_info" = interact {
    in = IT_Fun [] Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])),
    out = IT_Fun [Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])),Null] Null
    },
  "user_acceptLoan" = interact {
    in = IT_Fun [] Tuple(),
    out = IT_Fun [Tuple(),Null] Null
    },
  "user_makeOffer" = interact {
    in = IT_Fun [] Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})),
    out = IT_Fun [Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})),Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})] Null
    }
  };

{
  maps = {
    map0 = Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})
    }
  }
{
  
  }
{
  Just "info" = {
    config = (IT_Val Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), []),
    loanTerms = (IT_Val Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), []),
    offer = (IT_Fun [UInt] Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})}), [])
    }
  }
{
  Just "Admin_api" = {
    acceptOffer = ("Admin_api_acceptOffer", IT_Fun [Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})] Null),
    cancelLoanOfferandWithdrawCollateral = ("Admin_api_cancelLoanOfferandWithdrawCollateral", IT_Fun [UInt] Null),
    freeze = ("Admin_api_freeze", IT_Fun [Bool] Null),
    updateConfig = ("Admin_api_updateConfig", IT_Fun [Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])] Null),
    updateLoanTerms_info = ("Admin_api_updateLoanTerms_info", IT_Fun [Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])] Null)
    },
  Just "user" = {
    acceptLoan = ("user_acceptLoan", IT_Fun [] Null),
    makeOffer = ("user_makeOffer", IT_Fun [Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})] Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))
    }
  }
{
  Admin_api_acceptOffer = Nothing,
  Admin_api_cancelLoanOfferandWithdrawCollateral = Nothing,
  Admin_api_freeze = Nothing,
  Admin_api_updateConfig = Nothing,
  Admin_api_updateLoanTerms_info = Nothing,
  user_acceptLoan = Nothing,
  user_makeOffer = Nothing
  }
{
  
  }
const initialInfo/2365 : Tuple(UInt, UInt, Bool)* = [0, 0, false ];
const tokInfos/2363 : Array(Tuple(UInt, UInt, Bool), 1)* = array(Tuple(UInt, UInt, Bool), [initialInfo/2365 ]);
const tokens/2364 : Array(Token, 1)* = array(Token, [Token.zero ]);
const v5 : Object({"i": UInt, "sign": Bool})* = {
  i = 0,
  sign = true};
const v7 : Object({"i": UInt, "sign": Bool})* = {
  i = 0,
  sign = true};
only(Left "Admin") {
  const intiConfig/20 : Object({"ADMIN": Address, "comment": Bytes(200), "configuration": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "loanTerms_info": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])})* = "Admin".interact.intiConfig;
  const v21 : Address* = intiConfig/20.ADMIN;
  const v22 : Bytes(200)* = intiConfig/20.comment;
  const v23 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = intiConfig/20.configuration;
  const v24 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = intiConfig/20.loanTerms_info;
  const v25 : Token* = v23.token;
  const v26 : UInt* = v23.number_of_tokens_to_deposit;
  const v27 : Token* = v23.paymentAsset;
  const v28 : Bool* = v23.shouldPayInOnlyNetworkToken;
  const v29 : Bool* = v23.prefersNetworkToken;
  const v30 : UInt* = v24.duration_in_blocks;
  const v31 : UInt* = v24.principle;
  const v32 : Token* = v24.interest;
   };
only(Left "Admin_api_acceptOffer") {
   };
only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
   };
only(Left "Admin_api_freeze") {
   };
only(Left "Admin_api_updateConfig") {
   };
only(Left "Admin_api_updateLoanTerms_info") {
   };
only(Left "user_acceptLoan") {
   };
only(Left "user_makeOffer") {
   };
only(Left "Admin") {
  const v35 : Address* = selfAddress("Admin", False, 34 )();
  let v36 : Null;
  const config/37 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = intiConfig/20.configuration;
  const v38 : UInt* = config/37.number_of_tokens_to_deposit;
  const v39 : Token* = config/37.paymentAsset;
  const v40 : Bool* = config/37.prefersNetworkToken;
  const v41 : Bool* = config/37.shouldPayInOnlyNetworkToken;
  const deposit_nft/42 : Token* = config/37.token;
  const loanTerms/43 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = intiConfig/20.loanTerms_info;
  const ADMIN_WALLET/44 : Address* = intiConfig/20.ADMIN;
  v36 : Null = null;
   };
only(Left "Admin") {
  const v45 : Object({"number_of_tokens_to_deposit": UInt, "paymentAsset": Token, "prefersNetworkToken": Bool, "shouldPayInOnlyNetworkToken": Bool, "token": Token})* = {
    number_of_tokens_to_deposit = v38,
    paymentAsset = v39,
    prefersNetworkToken = v40,
    shouldPayInOnlyNetworkToken = v41,
    token = deposit_nft/42};
   };
publish(@0)
  .case("Admin").send({
    isClass = False,
    msg = [v45, deposit_nft/42, config/37, loanTerms/43, ADMIN_WALLET/44],
    pay = [0, ],
    when = true
    })
  .recv({
    didSend = didPublish/54 : Bool,
    from = Admin/46 : Address,
    msg = [config_as_object/47 : Object({"number_of_tokens_to_deposit": UInt, "paymentAsset": Token, "prefersNetworkToken": Bool, "shouldPayInOnlyNetworkToken": Bool, "token": Token}), deposit_nft/48 : Token, config/49 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), loanTerms/50 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), ADMIN_WALLET/51 : Address],
    secs = thisConsensusSecs/53 : UInt,
    time = thisConsensusTime/52 : UInt
    }){
    timeOrder(>, Nothing, thisConsensusTime/52 : UInt);
    timeOrder(>=, Nothing, thisConsensusSecs/53 : UInt);
    const tokInfo/2366 : Tuple(UInt, UInt, Bool)* = tokInfos/2363[0];
    const tokInfo'/2368 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2366, 0, 0 );
    const tokInfos'/2367 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos/2363, 0, tokInfo'/2368 );
    const tokens'/2369 : Array(Token, 1)* = Array.set(tokens/2364, 0, deposit_nft/48 );
    tokenInit(deposit_nft/48);
    checkPay(0, None);
    const paymentToken/55 : Token* = config_as_object/47.paymentAsset;
    commit();
    only(Left "Admin") {
      const v56 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
       };
    publish(@thisConsensusTime/52)
      .case("Admin").send({
        isClass = False,
        msg = [],
        pay = [0, (v56, deposit_nft/48 ) ],
        when = true
        })
      .recv({
        didSend = didPublish/64 : Bool,
        from = Admin/57 : Address,
        msg = [],
        secs = thisConsensusSecs/63 : UInt,
        time = thisConsensusTime/62 : UInt
        }){
        timeOrder(>, Just thisConsensusTime/52, thisConsensusTime/62 : UInt);
        timeOrder(>=, Just thisConsensusSecs/53, thisConsensusSecs/63 : UInt);
        const v58 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
        checkPay(0, None);
        const tokInfo/2370 : Tuple(UInt, UInt, Bool)* = tokInfos'/2367[0];
        const v59 : UInt* = tokInfo/2370[0];
        const v60 : UInt* = v59 + v58;
        const tokInfo/2371 : Tuple(UInt, UInt, Bool)* = tokInfos'/2367[0];
        const tokInfo'/2373 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2371, 0, v60 );
        const tokInfos'/2372 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2367, 0, tokInfo'/2373 );
        checkPay(v58, Some deposit_nft/48);
        const v61 : Bool* = Admin/46 == Admin/57;
        claim(CT_Require)(v61, Just "sender correct");
        const v65 : Token* = config/49.token;
        const v66 : UInt* = config/49.number_of_tokens_to_deposit;
        const v67 : Token* = config/49.paymentAsset;
        const v68 : Bool* = config/49.shouldPayInOnlyNetworkToken;
        const v69 : Bool* = config/49.prefersNetworkToken;
        view(Just "info").config.is(Just export (Nothing) => {
        return config/49;})
        const v80 : Data({"None": Null, "Some": Address})* = <None null>;
        const v81 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
          acceptedAddress = v80,
          config = config/49,
          continue = true,
          freeze = false,
          loanTerms = loanTerms/50,
          loanTermsAccepted = false,
          offers = 0};
        loopvar {
          returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v81,
          thisConsensusTime/2374 : UInt = thisConsensusTime/62,
          lastConsensusTime/2375 : UInt = thisConsensusTime/52,
          baseWaitTime/2376 : UInt = thisConsensusTime/52,
          thisConsensusSecs/2377 : UInt = thisConsensusSecs/63,
          lastConsensusSecs/2378 : UInt = thisConsensusSecs/53,
          baseWaitSecs/2379 : UInt = thisConsensusSecs/53,
          tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2372,
          netBalance/2382 : UInt = 0
          };
        invariant{
          [invariant(const v83 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
          const v84 : Token* = v83.token;
          const v85 : UInt* = v83.number_of_tokens_to_deposit;
          const v86 : Token* = v83.paymentAsset;
          const v87 : Bool* = v83.shouldPayInOnlyNetworkToken;
          const v88 : Bool* = v83.prefersNetworkToken;
          const v89 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
          const v90 : UInt* = v89.duration_in_blocks;
          const v91 : UInt* = v89.principle;
          const v92 : Token* = v89.interest;
          const netBalance/96 : UInt* = netBalance/2382;
          const v97 : Bool* = netBalance/96 == 0;
          
          return v97;, Nothing)] }
        while{
          const v99 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
          const v100 : Token* = v99.token;
          const v101 : UInt* = v99.number_of_tokens_to_deposit;
          const v102 : Token* = v99.paymentAsset;
          const v103 : Bool* = v99.shouldPayInOnlyNetworkToken;
          const v104 : Bool* = v99.prefersNetworkToken;
          const v105 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
          const v106 : UInt* = v105.duration_in_blocks;
          const v107 : UInt* = v105.principle;
          const v108 : Token* = v105.interest;
          const v112 : Bool* = returnExpression/79.continue;
          
          return v112; }
        {
          const v113 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
          const v114 : Token* = v113.token;
          const v115 : UInt* = v113.number_of_tokens_to_deposit;
          const v116 : Token* = v113.paymentAsset;
          const v117 : Bool* = v113.shouldPayInOnlyNetworkToken;
          const v118 : Bool* = v113.prefersNetworkToken;
          view(Just "info").config.is(Just export (Nothing) => {
          return v113;})
          const v119 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
          const v120 : UInt* = v119.duration_in_blocks;
          const v121 : UInt* = v119.principle;
          const v122 : Token* = v119.interest;
          view(Just "info").loanTerms.is(Just export (Nothing) => {
          return v119;})
          view(Just "info").offer.is(Just export (Just [v123 : UInt*]) => {const v125 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[res/123];
          
          return v125;})
          commit();
          only(Left "Admin_api_updateConfig") {
            const this/525 : Address* = selfAddress("Admin_api_updateConfig", True, 524 )();
            let v526 : Null;
            const .api72.dom/529 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* = protect<Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))>("Admin_api_updateConfig".interact.in());
            const v530 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/529[0];
            const v531 : Token* = v530.token;
            const v532 : UInt* = v530.number_of_tokens_to_deposit;
            const v533 : Token* = v530.paymentAsset;
            const v534 : Bool* = v530.shouldPayInOnlyNetworkToken;
            const v535 : Bool* = v530.prefersNetworkToken;
            const local_config/536 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/529[0];
            const v537 : Bool* = this/525 == Admin/46;
            const v538 : Bool* = ADMIN_WALLET/51 == this/525;
            const v539 : Bool* = (v537 ? true : v538);
            let v540 : Null;
            claim(CT_Assume)(v539, Just "The current user trying to access this interface is not Admin");
            v540 : Null = null;
            const x/555 : Bool* = returnExpression/79.loanTermsAccepted;
            const v557 : Bool* = (x/555 ? false : true);
            let v558 : Null;
            claim(CT_Assume)(v557, Just "Cannot update config after Loan terms accepted");
            v558 : Null = null;
            const _/573 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/529[0];
            let v574 : Null;
            v574 : Null = null;
            const v575 : Object({"msg": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))})* = {
              msg = .api72.dom/529};
            const v576 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = msg/529[0];
            const v577 : Token* = v576.token;
            const v578 : UInt* = v576.number_of_tokens_to_deposit;
            const v579 : Token* = v576.paymentAsset;
            const v580 : Bool* = v576.shouldPayInOnlyNetworkToken;
            const v581 : Bool* = v576.prefersNetworkToken;
            const v582 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <Admin_api_updateConfig0_127 null>;
            const v583 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_updateConfig0_126 msg/529>;
            const v584 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v582,
              msg = v583,
              when = true};
            v526 : Null = null;
             };
          only(Left "Admin_api_freeze") {
            const this/586 : Address* = selfAddress("Admin_api_freeze", True, 585 )();
            let v587 : Null;
            const .api73.dom/590 : Tuple(Bool)* = protect<Tuple(Bool)>("Admin_api_freeze".interact.in());
            const v591 : Bool* = .api73.dom/590[0];
            const toggle/592 : Bool* = .api73.dom/590[0];
            const v593 : Bool* = this/586 == Admin/46;
            const v594 : Bool* = ADMIN_WALLET/51 == this/586;
            const v595 : Bool* = (v593 ? true : v594);
            let v596 : Null;
            claim(CT_Assume)(v595, Just "The current user trying to access this interface is not Admin");
            v596 : Null = null;
            const x/611 : Bool* = returnExpression/79.loanTermsAccepted;
            const v613 : Bool* = (x/611 ? false : true);
            let v614 : Null;
            claim(CT_Assume)(v613, Just "Cannot update config after Loan terms accepted");
            v614 : Null = null;
            const v629 : Bool* = returnExpression/79.freeze;
            const v630 : Bool* = (v629 ? false : true);
            const x/631 : Bool* = (toggle/592 ? v629 : v630);
            const v633 : Bool* = (x/631 ? false : true);
            let v634 : Null;
            claim(CT_Assume)(v633, Just "The action you are trying to perform has already been done");
            v634 : Null = null;
            const _/649 : Bool* = .api73.dom/590[0];
            let v650 : Null;
            v650 : Null = null;
            const v651 : Object({"msg": Tuple(Bool)})* = {
              msg = .api73.dom/590};
            const v652 : Bool* = msg/590[0];
            const v653 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <Admin_api_freeze0_127 null>;
            const v654 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_freeze0_126 msg/590>;
            const v655 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v653,
              msg = v654,
              when = true};
            v587 : Null = null;
             };
          only(Left "Admin_api_updateLoanTerms_info") {
            const this/657 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 656 )();
            let v658 : Null;
            const .api74.dom/661 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* = protect<Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))>("Admin_api_updateLoanTerms_info".interact.in());
            const v662 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/661[0];
            const v663 : UInt* = v662.duration_in_blocks;
            const v664 : UInt* = v662.principle;
            const v665 : Token* = v662.interest;
            const local_config/666 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/661[0];
            const v667 : Bool* = this/657 == Admin/46;
            const v668 : Bool* = ADMIN_WALLET/51 == this/657;
            const v669 : Bool* = (v667 ? true : v668);
            let v670 : Null;
            claim(CT_Assume)(v669, Just "The current user trying to access this interface is not Admin");
            v670 : Null = null;
            const x/685 : Bool* = returnExpression/79.loanTermsAccepted;
            const v687 : Bool* = (x/685 ? false : true);
            let v688 : Null;
            claim(CT_Assume)(v687, Just "Cannot update loan terms after Loan terms accepted");
            v688 : Null = null;
            const _/703 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/661[0];
            let v704 : Null;
            v704 : Null = null;
            const v705 : Object({"msg": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))})* = {
              msg = .api74.dom/661};
            const v706 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = msg/661[0];
            const v707 : UInt* = v706.duration_in_blocks;
            const v708 : UInt* = v706.principle;
            const v709 : Token* = v706.interest;
            const v710 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <Admin_api_updateLoanTerms_info0_127 null>;
            const v711 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_updateLoanTerms_info0_126 msg/661>;
            const v712 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v710,
              msg = v711,
              when = true};
            v658 : Null = null;
             };
          only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
            const this/714 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 713 )();
            let v715 : Null;
            const .api75.dom/718 : Tuple(UInt)* = protect<Tuple(UInt)>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.in());
            const v719 : UInt* = .api75.dom/718[0];
            const local_config/720 : UInt* = .api75.dom/718[0];
            const v721 : Bool* = this/714 == Admin/46;
            const v722 : Bool* = ADMIN_WALLET/51 == this/714;
            const v723 : Bool* = (v721 ? true : v722);
            let v724 : Null;
            claim(CT_Assume)(v723, Just "The current user trying to access this interface is not Admin");
            v724 : Null = null;
            const x/739 : Bool* = returnExpression/79.loanTermsAccepted;
            const v741 : Bool* = (x/739 ? false : true);
            let v742 : Null;
            claim(CT_Assume)(v741, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
            v742 : Null = null;
            let v757 : Null;
            const v758 : Bool* = returnExpression/79.freeze;
            const v759 : Bool* = (v758 ? true : false);
            let v760 : Null;
            claim(CT_Assume)(v759, Just "Contract is frozen");
            v760 : Null = null;
            v757 : Null = null;
            const _/775 : UInt* = .api75.dom/718[0];
            let v776 : Null;
            v776 : Null = null;
            const v777 : Object({"msg": Tuple(UInt)})* = {
              msg = .api75.dom/718};
            const v778 : UInt* = msg/718[0];
            const v779 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <Admin_api_cancelLoanOfferandWithdrawCollateral0_127 null>;
            const v780 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_cancelLoanOfferandWithdrawCollateral0_126 msg/718>;
            const v781 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v779,
              msg = v780,
              when = true};
            v715 : Null = null;
             };
          only(Left "Admin_api_acceptOffer") {
            const this/783 : Address* = selfAddress("Admin_api_acceptOffer", True, 782 )();
            let v784 : Null;
            const .api76.dom/787 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* = protect<Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))>("Admin_api_acceptOffer".interact.in());
            const v788 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/787[0];
            const v789 : UInt* = v788.amount;
            const v790 : Address* = v788.borrower;
            const v791 : UInt* = v788.offerId;
            const v792 : Bool* = v788.rejected;
            const loanOffer/793 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/787[0];
            const v794 : Bool* = this/783 == Admin/46;
            const v795 : Bool* = ADMIN_WALLET/51 == this/783;
            const v796 : Bool* = (v794 ? true : v795);
            let v797 : Null;
            claim(CT_Assume)(v796, Just "The current user trying to access this interface is not Admin");
            v797 : Null = null;
            const x/812 : Bool* = returnExpression/79.loanTermsAccepted;
            const v814 : Bool* = (x/812 ? false : true);
            let v815 : Null;
            claim(CT_Assume)(v814, Just "An offer has already been accepted");
            v815 : Null = null;
            let v830 : Null;
            const v831 : Bool* = returnExpression/79.freeze;
            const v832 : Bool* = (v831 ? true : false);
            let v833 : Null;
            claim(CT_Assume)(v832, Just "Contract is frozen");
            v833 : Null = null;
            v830 : Null = null;
            const v848 : UInt* = loanOffer/793.amount;
            const v849 : Address* = loanOffer/793.borrower;
            const v850 : UInt* = loanOffer/793.offerId;
            const v851 : Bool* = loanOffer/793.rejected;
            const m/852 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v850];
            const v854 : UInt* = dataTag(m/852);
            const v855 : Bool* = v854 == 1;
            let v856 : Null;
            claim(CT_Assume)(v855, Just "Offer id doesn't exist");
            v856 : Null = null;
            const _/871 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/787[0];
            let v872 : Null;
            v872 : Null = null;
            const v873 : Object({"msg": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))})* = {
              msg = .api76.dom/787};
            const v874 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = msg/787[0];
            const v875 : UInt* = v874.amount;
            const v876 : Address* = v874.borrower;
            const v877 : UInt* = v874.offerId;
            const v878 : Bool* = v874.rejected;
            const v879 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <Admin_api_acceptOffer0_127 null>;
            const v880 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_acceptOffer0_126 msg/787>;
            const v881 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v879,
              msg = v880,
              when = true};
            v784 : Null = null;
             };
          only(Left "user_acceptLoan") {
            const v883 : Address* = selfAddress("user_acceptLoan", True, 882 )();
            let v884 : Null;
            const .api77.dom/887 : Tuple()* = protect<Tuple()>("user_acceptLoan".interact.in());
            let v888 : Null;
            const v889 : Bool* = returnExpression/79.freeze;
            const v890 : Bool* = (v889 ? true : false);
            let v891 : Null;
            claim(CT_Assume)(v890, Just "Contract is frozen");
            v891 : Null = null;
            v888 : Null = null;
            const acceptedAmount/906 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
            const x/907 : Bool* = returnExpression/79.loanTermsAccepted;
            const v909 : Bool* = (x/907 ? false : true);
            let v910 : Null;
            claim(CT_Assume)(v909, Just "Offer already accepted");
            v910 : Null = null;
            const v925 : Bool* = config_as_object/47.prefersNetworkToken;
            const v926 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v927 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/906, v926 ];
            const v928 : Tuple(UInt, Token)* = [acceptedAmount/906, paymentToken/55 ];
            const v929 : Tuple(UInt, Tuple(UInt, Token))* = [0, v928 ];
            const transferData/930 : Tuple(UInt, Tuple(UInt, Token))* = (v925 ? v927 : v929);
            let v931 : Null;
            v931 : Null = null;
            const v932 : Object({"msg": Tuple()})* = {
              msg = .api77.dom/887};
            const v933 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <user_acceptLoan0_127 null>;
            const v934 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <user_acceptLoan0_126 msg/887>;
            const v935 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v933,
              msg = v934,
              when = true};
            v884 : Null = null;
             };
          only(Left "user_makeOffer") {
            const v937 : Address* = selfAddress("user_makeOffer", True, 936 )();
            let v938 : Null;
            const .api78.dom/941 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* = protect<Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))>("user_makeOffer".interact.in());
            const v942 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/941[0];
            const v943 : UInt* = v942.amount;
            const v944 : Bool* = v942.shouldPayWithNetworkToken;
            const v945 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/941[0];
            const amount/946 : UInt* = v945.amount;
            const shouldPayWithNetworkToken/947 : Bool* = v945.shouldPayWithNetworkToken;
            let v948 : Null;
            const v949 : Bool* = returnExpression/79.freeze;
            const v950 : Bool* = (v949 ? true : false);
            let v951 : Null;
            claim(CT_Assume)(v950, Just "Contract is frozen");
            v951 : Null = null;
            v948 : Null = null;
            const _/966 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/941[0];
            let v967 : Null;
            v967 : Null = null;
            const v968 : Object({"msg": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = {
              msg = .api78.dom/941};
            const v969 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = msg/941[0];
            const v970 : UInt* = v969.amount;
            const v971 : Bool* = v969.shouldPayWithNetworkToken;
            const v972 : Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null})* = <user_makeOffer0_127 null>;
            const v973 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <user_makeOffer0_126 msg/941>;
            const v974 : Object({"_local": Data({"Admin_api_acceptOffer0_127": Null, "Admin_api_cancelLoanOfferandWithdrawCollateral0_127": Null, "Admin_api_freeze0_127": Null, "Admin_api_updateConfig0_127": Null, "Admin_api_updateLoanTerms_info0_127": Null, "user_acceptLoan0_127": Null, "user_makeOffer0_127": Null}), "msg": Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}), "when": Bool})* = {
              _local = v972,
              msg = v973,
              when = true};
            v938 : Null = null;
             };
          only(Left "Admin_api_acceptOffer") {
            const v975 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_acceptOffer0_126 msg/787>;
            const loanOffer/979 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/787[0];
            const v981 : Bool* = this/783 == Admin/46;
            const v982 : Bool* = ADMIN_WALLET/51 == this/783;
            const v983 : Bool* = (v981 ? true : v982);
            let v984 : Null;
            claim(CT_Assume)(v983, Just "The current user trying to access this interface is not Admin");
            v984 : Null = null;
            const x/999 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1001 : Bool* = (x/999 ? false : true);
            let v1002 : Null;
            claim(CT_Assume)(v1001, Just "An offer has already been accepted");
            v1002 : Null = null;
            let v1017 : Null;
            const v1018 : Bool* = returnExpression/79.freeze;
            const v1019 : Bool* = (v1018 ? true : false);
            let v1020 : Null;
            claim(CT_Assume)(v1019, Just "Contract is frozen");
            v1020 : Null = null;
            v1017 : Null = null;
            const v1035 : UInt* = loanOffer/979.amount;
            const v1036 : Address* = loanOffer/979.borrower;
            const v1037 : UInt* = loanOffer/979.offerId;
            const v1038 : Bool* = loanOffer/979.rejected;
            const m/1039 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1037];
            const v1041 : UInt* = dataTag(m/1039);
            const v1042 : Bool* = v1041 == 1;
            let v1043 : Null;
            claim(CT_Assume)(v1042, Just "Offer id doesn't exist");
            v1043 : Null = null;
            const v1058 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1059 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1058 ];
            const v1060 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1061 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1060 ];
            const v1062 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1063 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1062 ];
            const v1064 : Bool* = nntok0/55 == paymentToken/55;
            claim(CT_Assert)(v1064, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1065 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1066 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1065 ];
             };
          only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
            const v1067 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_cancelLoanOfferandWithdrawCollateral0_126 msg/718>;
            const local_config/1071 : UInt* = .api75.dom/718[0];
            const v1073 : Bool* = this/714 == Admin/46;
            const v1074 : Bool* = ADMIN_WALLET/51 == this/714;
            const v1075 : Bool* = (v1073 ? true : v1074);
            let v1076 : Null;
            claim(CT_Assume)(v1075, Just "The current user trying to access this interface is not Admin");
            v1076 : Null = null;
            const x/1091 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1093 : Bool* = (x/1091 ? false : true);
            let v1094 : Null;
            claim(CT_Assume)(v1093, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
            v1094 : Null = null;
            let v1109 : Null;
            const v1110 : Bool* = returnExpression/79.freeze;
            const v1111 : Bool* = (v1110 ? true : false);
            let v1112 : Null;
            claim(CT_Assume)(v1111, Just "Contract is frozen");
            v1112 : Null = null;
            v1109 : Null = null;
            const v1127 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1128 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1127 ];
            const v1129 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1130 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1129 ];
            const v1131 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1132 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1131 ];
            const v1133 : Bool* = nntok0/55 == paymentToken/55;
            claim(CT_Assert)(v1133, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1134 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1135 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1134 ];
             };
          only(Left "Admin_api_freeze") {
            const v1136 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_freeze0_126 msg/590>;
            const toggle/1140 : Bool* = .api73.dom/590[0];
            const v1142 : Bool* = this/586 == Admin/46;
            const v1143 : Bool* = ADMIN_WALLET/51 == this/586;
            const v1144 : Bool* = (v1142 ? true : v1143);
            let v1145 : Null;
            claim(CT_Assume)(v1144, Just "The current user trying to access this interface is not Admin");
            v1145 : Null = null;
            const x/1160 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1162 : Bool* = (x/1160 ? false : true);
            let v1163 : Null;
            claim(CT_Assume)(v1162, Just "Cannot update config after Loan terms accepted");
            v1163 : Null = null;
            const v1178 : Bool* = returnExpression/79.freeze;
            const v1179 : Bool* = (v1178 ? false : true);
            const x/1180 : Bool* = (toggle/1140 ? v1178 : v1179);
            const v1182 : Bool* = (x/1180 ? false : true);
            let v1183 : Null;
            claim(CT_Assume)(v1182, Just "The action you are trying to perform has already been done");
            v1183 : Null = null;
            const v1198 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1199 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1198 ];
            const v1200 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1201 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1200 ];
            const v1202 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1203 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1202 ];
            const v1204 : Bool* = nntok0/55 == paymentToken/55;
            claim(CT_Assert)(v1204, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1205 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1206 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1205 ];
             };
          only(Left "Admin_api_updateConfig") {
            const v1207 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_updateConfig0_126 msg/529>;
            const local_config/1211 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/529[0];
            const v1213 : Bool* = this/525 == Admin/46;
            const v1214 : Bool* = ADMIN_WALLET/51 == this/525;
            const v1215 : Bool* = (v1213 ? true : v1214);
            let v1216 : Null;
            claim(CT_Assume)(v1215, Just "The current user trying to access this interface is not Admin");
            v1216 : Null = null;
            const x/1231 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1233 : Bool* = (x/1231 ? false : true);
            let v1234 : Null;
            claim(CT_Assume)(v1233, Just "Cannot update config after Loan terms accepted");
            v1234 : Null = null;
            const v1249 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1250 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1249 ];
            const v1251 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1252 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1251 ];
            const v1253 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1254 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1253 ];
            const v1255 : Bool* = nntok0/55 == paymentToken/55;
            claim(CT_Assert)(v1255, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1256 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1257 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1256 ];
             };
          only(Left "Admin_api_updateLoanTerms_info") {
            const v1258 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <Admin_api_updateLoanTerms_info0_126 msg/661>;
            const local_config/1262 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/661[0];
            const v1264 : Bool* = this/657 == Admin/46;
            const v1265 : Bool* = ADMIN_WALLET/51 == this/657;
            const v1266 : Bool* = (v1264 ? true : v1265);
            let v1267 : Null;
            claim(CT_Assume)(v1266, Just "The current user trying to access this interface is not Admin");
            v1267 : Null = null;
            const x/1282 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1284 : Bool* = (x/1282 ? false : true);
            let v1285 : Null;
            claim(CT_Assume)(v1284, Just "Cannot update loan terms after Loan terms accepted");
            v1285 : Null = null;
            const v1300 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1301 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1300 ];
            const v1302 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1303 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1302 ];
            const v1304 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1305 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1304 ];
            const v1306 : Bool* = nntok0/55 == paymentToken/55;
            claim(CT_Assert)(v1306, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1307 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1308 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1307 ];
             };
          only(Left "user_acceptLoan") {
            const v1309 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <user_acceptLoan0_126 msg/887>;
            let v1314 : Null;
            const v1315 : Bool* = returnExpression/79.freeze;
            const v1316 : Bool* = (v1315 ? true : false);
            let v1317 : Null;
            claim(CT_Assume)(v1316, Just "Contract is frozen");
            v1317 : Null = null;
            v1314 : Null = null;
            const acceptedAmount/1332 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
            const x/1333 : Bool* = returnExpression/79.loanTermsAccepted;
            const v1335 : Bool* = (x/1333 ? false : true);
            let v1336 : Null;
            claim(CT_Assume)(v1335, Just "Offer already accepted");
            v1336 : Null = null;
            const v1351 : Bool* = config_as_object/47.prefersNetworkToken;
            const v1352 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1353 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1332, v1352 ];
            const v1354 : Tuple(UInt, Token)* = [acceptedAmount/1332, paymentToken/55 ];
            const v1355 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1354 ];
            const transferData/1356 : Tuple(UInt, Tuple(UInt, Token))* = (v1351 ? v1353 : v1355);
            const networkTokenPay/1357 : UInt* = transferData/1356[0];
            const v1358 : Tuple(UInt, Token)* = transferData/1356[1];
            const amt0/1359 : UInt* = v1358[0];
            const nntok0/1360 : Token* = v1358[1];
            const v1361 : Bool* = nntok0/1360 == paymentToken/55;
            claim(CT_Assert)(v1361, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1362 : Tuple(UInt, Token)* = [amt0/1359, paymentToken/55 ];
            const v1363 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1357, v1362 ];
             };
          only(Left "user_makeOffer") {
            const v1364 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})* = <user_makeOffer0_126 msg/941>;
            const v1368 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/941[0];
            const amount/1370 : UInt* = v1368.amount;
            const shouldPayWithNetworkToken/1371 : Bool* = v1368.shouldPayWithNetworkToken;
            let v1372 : Null;
            const v1373 : Bool* = returnExpression/79.freeze;
            const v1374 : Bool* = (v1373 ? true : false);
            let v1375 : Null;
            claim(CT_Assume)(v1374, Just "Contract is frozen");
            v1375 : Null = null;
            v1372 : Null = null;
            const v1390 : Bool* = config_as_object/47.prefersNetworkToken;
            const v1391 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
            const v1392 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1370, v1391 ];
            const v1393 : Tuple(UInt, Token)* = [amount/1370, paymentToken/55 ];
            const v1394 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1393 ];
            const v1395 : Tuple(UInt, Tuple(UInt, Token))* = (v1390 ? v1392 : v1394);
            const networkTokenPay/1396 : UInt* = v1395[0];
            const v1397 : Tuple(UInt, Token)* = v1395[1];
            const amt0/1398 : UInt* = v1397[0];
            const nntok0/1399 : Token* = v1397[1];
            const v1400 : Bool* = nntok0/1399 == paymentToken/55;
            claim(CT_Assert)(v1400, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
            const v1401 : Tuple(UInt, Token)* = [amt0/1398, paymentToken/55 ];
            const v1402 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1396, v1401 ];
             };
          publish(@thisConsensusTime/2374)
            .case("Admin_api_acceptOffer").send({
              isClass = True,
              msg = [v975],
              pay = [0, (0, paymentToken/55 ) ],
              when = true
              })
            .case("Admin_api_cancelLoanOfferandWithdrawCollateral").send({
              isClass = True,
              msg = [v1067],
              pay = [0, (0, paymentToken/55 ) ],
              when = true
              })
            .case("Admin_api_freeze").send({
              isClass = True,
              msg = [v1136],
              pay = [0, (0, paymentToken/55 ) ],
              when = true
              })
            .case("Admin_api_updateConfig").send({
              isClass = True,
              msg = [v1207],
              pay = [0, (0, paymentToken/55 ) ],
              when = true
              })
            .case("Admin_api_updateLoanTerms_info").send({
              isClass = True,
              msg = [v1258],
              pay = [0, (0, paymentToken/55 ) ],
              when = true
              })
            .case("user_acceptLoan").send({
              isClass = True,
              msg = [v1309],
              pay = [networkTokenPay/1357, (amt0/1359, paymentToken/55 ) ],
              when = true
              })
            .case("user_makeOffer").send({
              isClass = True,
              msg = [v1364],
              pay = [networkTokenPay/1396, (amt0/1398, paymentToken/55 ) ],
              when = true
              })
            .recv({
              didSend = didPublish/1821 : Bool,
              from = this/1403 : Address,
              msg = [.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})],
              secs = thisConsensusSecs/1820 : UInt,
              time = thisConsensusTime/1819 : UInt
              }){
              timeOrder(>, Just thisConsensusTime/2374, thisConsensusTime/1819 : UInt);
              timeOrder(>=, Just thisConsensusSecs/2377, thisConsensusSecs/1820 : UInt);
              switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                case Admin_api_acceptOffer0_126 as data_id/1407 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1408 : Null;
                  v1408 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2383 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2385 : Tuple(Bool, UInt)* = for (acc/2384 : Tuple(Bool, UInt)* = initAcc/2383; [elem/2389 : Token*],arrIdx/2397 : UInt* in [tokens'/2369]) {
                    const isFound/2395 : Bool* = acc/2384[0];
                    const searchIdx/2392 : UInt* = acc/2384[1];
                    const toksEq/2393 : Bool* = elem/2389 == paymentToken/55;
                    const cnd/2394 : Bool* = (isFound/2395 ? true : toksEq/2393);
                    const searchIdx'/2391 : UInt* = searchIdx/2392 + 1;
                    const failAcc/2388 : Tuple(Bool, UInt)* = [false, searchIdx'/2391 ];
                    const succAcc/2386 : Tuple(Bool, UInt)* = [true, searchIdx/2392 ];
                    const bl/2387 : Tuple(Bool, UInt)* = (cnd/2394 ? succAcc/2386 : failAcc/2388);
                    
                    return bl/2387;}
                  const tokIdx/2390 : UInt* = res/2385[1];
                  const isFound'/2396 : Bool* = res/2385[0];
                  claim(CT_Assert)(isFound'/2396, Just "Token is tracked");
                  const tokInfo/2398 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2390];
                  const v1817 : UInt* = tokInfo/2398[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2399 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2401 : Tuple(Bool, UInt)* = for (acc/2400 : Tuple(Bool, UInt)* = initAcc/2399; [elem/2405 : Token*],arrIdx/2413 : UInt* in [tokens'/2369]) {
                    const isFound/2411 : Bool* = acc/2400[0];
                    const searchIdx/2408 : UInt* = acc/2400[1];
                    const toksEq/2409 : Bool* = elem/2405 == paymentToken/55;
                    const cnd/2410 : Bool* = (isFound/2411 ? true : toksEq/2409);
                    const searchIdx'/2407 : UInt* = searchIdx/2408 + 1;
                    const failAcc/2404 : Tuple(Bool, UInt)* = [false, searchIdx'/2407 ];
                    const succAcc/2402 : Tuple(Bool, UInt)* = [true, searchIdx/2408 ];
                    const bl/2403 : Tuple(Bool, UInt)* = (cnd/2410 ? succAcc/2402 : failAcc/2404);
                    
                    return bl/2403;}
                  const tokIdx/2406 : UInt* = res/2401[1];
                  const isFound'/2412 : Bool* = res/2401[0];
                  claim(CT_Assert)(isFound'/2412, Just "Token is tracked");
                  const tokInfo/2414 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2406];
                  const tokInfo'/2416 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2414, 0, v1818 );
                  const tokInfos'/2415 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2406, tokInfo'/2416 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2417 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2419 : Tuple(Bool, UInt)* = for (acc/2418 : Tuple(Bool, UInt)* = initAcc/2417; [elem/2423 : Token*],arrIdx/2431 : UInt* in [tokens'/2369]) {
                        const isFound/2429 : Bool* = acc/2418[0];
                        const searchIdx/2426 : UInt* = acc/2418[1];
                        const toksEq/2427 : Bool* = elem/2423 == v2255;
                        const cnd/2428 : Bool* = (isFound/2429 ? true : toksEq/2427);
                        const searchIdx'/2425 : UInt* = searchIdx/2426 + 1;
                        const failAcc/2422 : Tuple(Bool, UInt)* = [false, searchIdx'/2425 ];
                        const succAcc/2420 : Tuple(Bool, UInt)* = [true, searchIdx/2426 ];
                        const bl/2421 : Tuple(Bool, UInt)* = (cnd/2428 ? succAcc/2420 : failAcc/2422);
                        
                        return bl/2421;}
                      const tokIdx/2424 : UInt* = res/2419[1];
                      const isFound'/2430 : Bool* = res/2419[0];
                      claim(CT_Assert)(isFound'/2430, Just "Token is tracked");
                      const tokInfo/2432 : Tuple(UInt, UInt, Bool)* = tokInfos'/2415[tokIdx/2424];
                      const v2260 : UInt* = tokInfo/2432[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2433 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2435 : Tuple(Bool, UInt)* = for (acc/2434 : Tuple(Bool, UInt)* = initAcc/2433; [elem/2439 : Token*],arrIdx/2447 : UInt* in [tokens'/2369]) {
                        const isFound/2445 : Bool* = acc/2434[0];
                        const searchIdx/2442 : UInt* = acc/2434[1];
                        const toksEq/2443 : Bool* = elem/2439 == v2255;
                        const cnd/2444 : Bool* = (isFound/2445 ? true : toksEq/2443);
                        const searchIdx'/2441 : UInt* = searchIdx/2442 + 1;
                        const failAcc/2438 : Tuple(Bool, UInt)* = [false, searchIdx'/2441 ];
                        const succAcc/2436 : Tuple(Bool, UInt)* = [true, searchIdx/2442 ];
                        const bl/2437 : Tuple(Bool, UInt)* = (cnd/2444 ? succAcc/2436 : failAcc/2438);
                        
                        return bl/2437;}
                      const tokIdx/2440 : UInt* = res/2435[1];
                      const isFound'/2446 : Bool* = res/2435[0];
                      claim(CT_Assert)(isFound'/2446, Just "Token is tracked");
                      const tokInfo/2448 : Tuple(UInt, UInt, Bool)* = tokInfos'/2415[tokIdx/2440];
                      const v2262 : UInt* = tokInfo/2448[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2449 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2451 : Tuple(Bool, UInt)* = for (acc/2450 : Tuple(Bool, UInt)* = initAcc/2449; [elem/2455 : Token*],arrIdx/2463 : UInt* in [tokens'/2369]) {
                        const isFound/2461 : Bool* = acc/2450[0];
                        const searchIdx/2458 : UInt* = acc/2450[1];
                        const toksEq/2459 : Bool* = elem/2455 == v2255;
                        const cnd/2460 : Bool* = (isFound/2461 ? true : toksEq/2459);
                        const searchIdx'/2457 : UInt* = searchIdx/2458 + 1;
                        const failAcc/2454 : Tuple(Bool, UInt)* = [false, searchIdx'/2457 ];
                        const succAcc/2452 : Tuple(Bool, UInt)* = [true, searchIdx/2458 ];
                        const bl/2453 : Tuple(Bool, UInt)* = (cnd/2460 ? succAcc/2452 : failAcc/2454);
                        
                        return bl/2453;}
                      const tokIdx/2456 : UInt* = res/2451[1];
                      const isFound'/2462 : Bool* = res/2451[0];
                      claim(CT_Assert)(isFound'/2462, Just "Token is tracked");
                      const tokInfo/2464 : Tuple(UInt, UInt, Bool)* = tokInfos'/2415[tokIdx/2456];
                      const tokInfo'/2466 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2464, 0, v2263 );
                      const tokInfos'/2465 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2415, tokIdx/2456, tokInfo'/2466 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2465,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2415,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1409 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1410 : Null;
                  v1410 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2467 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2469 : Tuple(Bool, UInt)* = for (acc/2468 : Tuple(Bool, UInt)* = initAcc/2467; [elem/2473 : Token*],arrIdx/2481 : UInt* in [tokens'/2369]) {
                    const isFound/2479 : Bool* = acc/2468[0];
                    const searchIdx/2476 : UInt* = acc/2468[1];
                    const toksEq/2477 : Bool* = elem/2473 == paymentToken/55;
                    const cnd/2478 : Bool* = (isFound/2479 ? true : toksEq/2477);
                    const searchIdx'/2475 : UInt* = searchIdx/2476 + 1;
                    const failAcc/2472 : Tuple(Bool, UInt)* = [false, searchIdx'/2475 ];
                    const succAcc/2470 : Tuple(Bool, UInt)* = [true, searchIdx/2476 ];
                    const bl/2471 : Tuple(Bool, UInt)* = (cnd/2478 ? succAcc/2470 : failAcc/2472);
                    
                    return bl/2471;}
                  const tokIdx/2474 : UInt* = res/2469[1];
                  const isFound'/2480 : Bool* = res/2469[0];
                  claim(CT_Assert)(isFound'/2480, Just "Token is tracked");
                  const tokInfo/2482 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2474];
                  const v1817 : UInt* = tokInfo/2482[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2483 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2485 : Tuple(Bool, UInt)* = for (acc/2484 : Tuple(Bool, UInt)* = initAcc/2483; [elem/2489 : Token*],arrIdx/2497 : UInt* in [tokens'/2369]) {
                    const isFound/2495 : Bool* = acc/2484[0];
                    const searchIdx/2492 : UInt* = acc/2484[1];
                    const toksEq/2493 : Bool* = elem/2489 == paymentToken/55;
                    const cnd/2494 : Bool* = (isFound/2495 ? true : toksEq/2493);
                    const searchIdx'/2491 : UInt* = searchIdx/2492 + 1;
                    const failAcc/2488 : Tuple(Bool, UInt)* = [false, searchIdx'/2491 ];
                    const succAcc/2486 : Tuple(Bool, UInt)* = [true, searchIdx/2492 ];
                    const bl/2487 : Tuple(Bool, UInt)* = (cnd/2494 ? succAcc/2486 : failAcc/2488);
                    
                    return bl/2487;}
                  const tokIdx/2490 : UInt* = res/2485[1];
                  const isFound'/2496 : Bool* = res/2485[0];
                  claim(CT_Assert)(isFound'/2496, Just "Token is tracked");
                  const tokInfo/2498 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2490];
                  const tokInfo'/2500 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2498, 0, v1818 );
                  const tokInfos'/2499 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2490, tokInfo'/2500 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2501 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2503 : Tuple(Bool, UInt)* = for (acc/2502 : Tuple(Bool, UInt)* = initAcc/2501; [elem/2507 : Token*],arrIdx/2515 : UInt* in [tokens'/2369]) {
                        const isFound/2513 : Bool* = acc/2502[0];
                        const searchIdx/2510 : UInt* = acc/2502[1];
                        const toksEq/2511 : Bool* = elem/2507 == v2255;
                        const cnd/2512 : Bool* = (isFound/2513 ? true : toksEq/2511);
                        const searchIdx'/2509 : UInt* = searchIdx/2510 + 1;
                        const failAcc/2506 : Tuple(Bool, UInt)* = [false, searchIdx'/2509 ];
                        const succAcc/2504 : Tuple(Bool, UInt)* = [true, searchIdx/2510 ];
                        const bl/2505 : Tuple(Bool, UInt)* = (cnd/2512 ? succAcc/2504 : failAcc/2506);
                        
                        return bl/2505;}
                      const tokIdx/2508 : UInt* = res/2503[1];
                      const isFound'/2514 : Bool* = res/2503[0];
                      claim(CT_Assert)(isFound'/2514, Just "Token is tracked");
                      const tokInfo/2516 : Tuple(UInt, UInt, Bool)* = tokInfos'/2499[tokIdx/2508];
                      const v2260 : UInt* = tokInfo/2516[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2517 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2519 : Tuple(Bool, UInt)* = for (acc/2518 : Tuple(Bool, UInt)* = initAcc/2517; [elem/2523 : Token*],arrIdx/2531 : UInt* in [tokens'/2369]) {
                        const isFound/2529 : Bool* = acc/2518[0];
                        const searchIdx/2526 : UInt* = acc/2518[1];
                        const toksEq/2527 : Bool* = elem/2523 == v2255;
                        const cnd/2528 : Bool* = (isFound/2529 ? true : toksEq/2527);
                        const searchIdx'/2525 : UInt* = searchIdx/2526 + 1;
                        const failAcc/2522 : Tuple(Bool, UInt)* = [false, searchIdx'/2525 ];
                        const succAcc/2520 : Tuple(Bool, UInt)* = [true, searchIdx/2526 ];
                        const bl/2521 : Tuple(Bool, UInt)* = (cnd/2528 ? succAcc/2520 : failAcc/2522);
                        
                        return bl/2521;}
                      const tokIdx/2524 : UInt* = res/2519[1];
                      const isFound'/2530 : Bool* = res/2519[0];
                      claim(CT_Assert)(isFound'/2530, Just "Token is tracked");
                      const tokInfo/2532 : Tuple(UInt, UInt, Bool)* = tokInfos'/2499[tokIdx/2524];
                      const v2262 : UInt* = tokInfo/2532[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2533 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2535 : Tuple(Bool, UInt)* = for (acc/2534 : Tuple(Bool, UInt)* = initAcc/2533; [elem/2539 : Token*],arrIdx/2547 : UInt* in [tokens'/2369]) {
                        const isFound/2545 : Bool* = acc/2534[0];
                        const searchIdx/2542 : UInt* = acc/2534[1];
                        const toksEq/2543 : Bool* = elem/2539 == v2255;
                        const cnd/2544 : Bool* = (isFound/2545 ? true : toksEq/2543);
                        const searchIdx'/2541 : UInt* = searchIdx/2542 + 1;
                        const failAcc/2538 : Tuple(Bool, UInt)* = [false, searchIdx'/2541 ];
                        const succAcc/2536 : Tuple(Bool, UInt)* = [true, searchIdx/2542 ];
                        const bl/2537 : Tuple(Bool, UInt)* = (cnd/2544 ? succAcc/2536 : failAcc/2538);
                        
                        return bl/2537;}
                      const tokIdx/2540 : UInt* = res/2535[1];
                      const isFound'/2546 : Bool* = res/2535[0];
                      claim(CT_Assert)(isFound'/2546, Just "Token is tracked");
                      const tokInfo/2548 : Tuple(UInt, UInt, Bool)* = tokInfos'/2499[tokIdx/2540];
                      const tokInfo'/2550 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2548, 0, v2263 );
                      const tokInfos'/2549 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2499, tokIdx/2540, tokInfo'/2550 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2549,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2499,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case Admin_api_freeze0_126 as data_id/1411 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1412 : Null;
                  v1412 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2551 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2553 : Tuple(Bool, UInt)* = for (acc/2552 : Tuple(Bool, UInt)* = initAcc/2551; [elem/2557 : Token*],arrIdx/2565 : UInt* in [tokens'/2369]) {
                    const isFound/2563 : Bool* = acc/2552[0];
                    const searchIdx/2560 : UInt* = acc/2552[1];
                    const toksEq/2561 : Bool* = elem/2557 == paymentToken/55;
                    const cnd/2562 : Bool* = (isFound/2563 ? true : toksEq/2561);
                    const searchIdx'/2559 : UInt* = searchIdx/2560 + 1;
                    const failAcc/2556 : Tuple(Bool, UInt)* = [false, searchIdx'/2559 ];
                    const succAcc/2554 : Tuple(Bool, UInt)* = [true, searchIdx/2560 ];
                    const bl/2555 : Tuple(Bool, UInt)* = (cnd/2562 ? succAcc/2554 : failAcc/2556);
                    
                    return bl/2555;}
                  const tokIdx/2558 : UInt* = res/2553[1];
                  const isFound'/2564 : Bool* = res/2553[0];
                  claim(CT_Assert)(isFound'/2564, Just "Token is tracked");
                  const tokInfo/2566 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2558];
                  const v1817 : UInt* = tokInfo/2566[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2567 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2569 : Tuple(Bool, UInt)* = for (acc/2568 : Tuple(Bool, UInt)* = initAcc/2567; [elem/2573 : Token*],arrIdx/2581 : UInt* in [tokens'/2369]) {
                    const isFound/2579 : Bool* = acc/2568[0];
                    const searchIdx/2576 : UInt* = acc/2568[1];
                    const toksEq/2577 : Bool* = elem/2573 == paymentToken/55;
                    const cnd/2578 : Bool* = (isFound/2579 ? true : toksEq/2577);
                    const searchIdx'/2575 : UInt* = searchIdx/2576 + 1;
                    const failAcc/2572 : Tuple(Bool, UInt)* = [false, searchIdx'/2575 ];
                    const succAcc/2570 : Tuple(Bool, UInt)* = [true, searchIdx/2576 ];
                    const bl/2571 : Tuple(Bool, UInt)* = (cnd/2578 ? succAcc/2570 : failAcc/2572);
                    
                    return bl/2571;}
                  const tokIdx/2574 : UInt* = res/2569[1];
                  const isFound'/2580 : Bool* = res/2569[0];
                  claim(CT_Assert)(isFound'/2580, Just "Token is tracked");
                  const tokInfo/2582 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2574];
                  const tokInfo'/2584 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2582, 0, v1818 );
                  const tokInfos'/2583 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2574, tokInfo'/2584 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2585 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2587 : Tuple(Bool, UInt)* = for (acc/2586 : Tuple(Bool, UInt)* = initAcc/2585; [elem/2591 : Token*],arrIdx/2599 : UInt* in [tokens'/2369]) {
                        const isFound/2597 : Bool* = acc/2586[0];
                        const searchIdx/2594 : UInt* = acc/2586[1];
                        const toksEq/2595 : Bool* = elem/2591 == v2255;
                        const cnd/2596 : Bool* = (isFound/2597 ? true : toksEq/2595);
                        const searchIdx'/2593 : UInt* = searchIdx/2594 + 1;
                        const failAcc/2590 : Tuple(Bool, UInt)* = [false, searchIdx'/2593 ];
                        const succAcc/2588 : Tuple(Bool, UInt)* = [true, searchIdx/2594 ];
                        const bl/2589 : Tuple(Bool, UInt)* = (cnd/2596 ? succAcc/2588 : failAcc/2590);
                        
                        return bl/2589;}
                      const tokIdx/2592 : UInt* = res/2587[1];
                      const isFound'/2598 : Bool* = res/2587[0];
                      claim(CT_Assert)(isFound'/2598, Just "Token is tracked");
                      const tokInfo/2600 : Tuple(UInt, UInt, Bool)* = tokInfos'/2583[tokIdx/2592];
                      const v2260 : UInt* = tokInfo/2600[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2601 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2603 : Tuple(Bool, UInt)* = for (acc/2602 : Tuple(Bool, UInt)* = initAcc/2601; [elem/2607 : Token*],arrIdx/2615 : UInt* in [tokens'/2369]) {
                        const isFound/2613 : Bool* = acc/2602[0];
                        const searchIdx/2610 : UInt* = acc/2602[1];
                        const toksEq/2611 : Bool* = elem/2607 == v2255;
                        const cnd/2612 : Bool* = (isFound/2613 ? true : toksEq/2611);
                        const searchIdx'/2609 : UInt* = searchIdx/2610 + 1;
                        const failAcc/2606 : Tuple(Bool, UInt)* = [false, searchIdx'/2609 ];
                        const succAcc/2604 : Tuple(Bool, UInt)* = [true, searchIdx/2610 ];
                        const bl/2605 : Tuple(Bool, UInt)* = (cnd/2612 ? succAcc/2604 : failAcc/2606);
                        
                        return bl/2605;}
                      const tokIdx/2608 : UInt* = res/2603[1];
                      const isFound'/2614 : Bool* = res/2603[0];
                      claim(CT_Assert)(isFound'/2614, Just "Token is tracked");
                      const tokInfo/2616 : Tuple(UInt, UInt, Bool)* = tokInfos'/2583[tokIdx/2608];
                      const v2262 : UInt* = tokInfo/2616[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2617 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2619 : Tuple(Bool, UInt)* = for (acc/2618 : Tuple(Bool, UInt)* = initAcc/2617; [elem/2623 : Token*],arrIdx/2631 : UInt* in [tokens'/2369]) {
                        const isFound/2629 : Bool* = acc/2618[0];
                        const searchIdx/2626 : UInt* = acc/2618[1];
                        const toksEq/2627 : Bool* = elem/2623 == v2255;
                        const cnd/2628 : Bool* = (isFound/2629 ? true : toksEq/2627);
                        const searchIdx'/2625 : UInt* = searchIdx/2626 + 1;
                        const failAcc/2622 : Tuple(Bool, UInt)* = [false, searchIdx'/2625 ];
                        const succAcc/2620 : Tuple(Bool, UInt)* = [true, searchIdx/2626 ];
                        const bl/2621 : Tuple(Bool, UInt)* = (cnd/2628 ? succAcc/2620 : failAcc/2622);
                        
                        return bl/2621;}
                      const tokIdx/2624 : UInt* = res/2619[1];
                      const isFound'/2630 : Bool* = res/2619[0];
                      claim(CT_Assert)(isFound'/2630, Just "Token is tracked");
                      const tokInfo/2632 : Tuple(UInt, UInt, Bool)* = tokInfos'/2583[tokIdx/2624];
                      const tokInfo'/2634 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2632, 0, v2263 );
                      const tokInfos'/2633 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2583, tokIdx/2624, tokInfo'/2634 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2633,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2583,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case Admin_api_updateConfig0_126 as data_id/1413 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1414 : Null;
                  v1414 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2635 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2637 : Tuple(Bool, UInt)* = for (acc/2636 : Tuple(Bool, UInt)* = initAcc/2635; [elem/2641 : Token*],arrIdx/2649 : UInt* in [tokens'/2369]) {
                    const isFound/2647 : Bool* = acc/2636[0];
                    const searchIdx/2644 : UInt* = acc/2636[1];
                    const toksEq/2645 : Bool* = elem/2641 == paymentToken/55;
                    const cnd/2646 : Bool* = (isFound/2647 ? true : toksEq/2645);
                    const searchIdx'/2643 : UInt* = searchIdx/2644 + 1;
                    const failAcc/2640 : Tuple(Bool, UInt)* = [false, searchIdx'/2643 ];
                    const succAcc/2638 : Tuple(Bool, UInt)* = [true, searchIdx/2644 ];
                    const bl/2639 : Tuple(Bool, UInt)* = (cnd/2646 ? succAcc/2638 : failAcc/2640);
                    
                    return bl/2639;}
                  const tokIdx/2642 : UInt* = res/2637[1];
                  const isFound'/2648 : Bool* = res/2637[0];
                  claim(CT_Assert)(isFound'/2648, Just "Token is tracked");
                  const tokInfo/2650 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2642];
                  const v1817 : UInt* = tokInfo/2650[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2651 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2653 : Tuple(Bool, UInt)* = for (acc/2652 : Tuple(Bool, UInt)* = initAcc/2651; [elem/2657 : Token*],arrIdx/2665 : UInt* in [tokens'/2369]) {
                    const isFound/2663 : Bool* = acc/2652[0];
                    const searchIdx/2660 : UInt* = acc/2652[1];
                    const toksEq/2661 : Bool* = elem/2657 == paymentToken/55;
                    const cnd/2662 : Bool* = (isFound/2663 ? true : toksEq/2661);
                    const searchIdx'/2659 : UInt* = searchIdx/2660 + 1;
                    const failAcc/2656 : Tuple(Bool, UInt)* = [false, searchIdx'/2659 ];
                    const succAcc/2654 : Tuple(Bool, UInt)* = [true, searchIdx/2660 ];
                    const bl/2655 : Tuple(Bool, UInt)* = (cnd/2662 ? succAcc/2654 : failAcc/2656);
                    
                    return bl/2655;}
                  const tokIdx/2658 : UInt* = res/2653[1];
                  const isFound'/2664 : Bool* = res/2653[0];
                  claim(CT_Assert)(isFound'/2664, Just "Token is tracked");
                  const tokInfo/2666 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2658];
                  const tokInfo'/2668 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2666, 0, v1818 );
                  const tokInfos'/2667 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2658, tokInfo'/2668 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2669 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2671 : Tuple(Bool, UInt)* = for (acc/2670 : Tuple(Bool, UInt)* = initAcc/2669; [elem/2675 : Token*],arrIdx/2683 : UInt* in [tokens'/2369]) {
                        const isFound/2681 : Bool* = acc/2670[0];
                        const searchIdx/2678 : UInt* = acc/2670[1];
                        const toksEq/2679 : Bool* = elem/2675 == v2255;
                        const cnd/2680 : Bool* = (isFound/2681 ? true : toksEq/2679);
                        const searchIdx'/2677 : UInt* = searchIdx/2678 + 1;
                        const failAcc/2674 : Tuple(Bool, UInt)* = [false, searchIdx'/2677 ];
                        const succAcc/2672 : Tuple(Bool, UInt)* = [true, searchIdx/2678 ];
                        const bl/2673 : Tuple(Bool, UInt)* = (cnd/2680 ? succAcc/2672 : failAcc/2674);
                        
                        return bl/2673;}
                      const tokIdx/2676 : UInt* = res/2671[1];
                      const isFound'/2682 : Bool* = res/2671[0];
                      claim(CT_Assert)(isFound'/2682, Just "Token is tracked");
                      const tokInfo/2684 : Tuple(UInt, UInt, Bool)* = tokInfos'/2667[tokIdx/2676];
                      const v2260 : UInt* = tokInfo/2684[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2685 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2687 : Tuple(Bool, UInt)* = for (acc/2686 : Tuple(Bool, UInt)* = initAcc/2685; [elem/2691 : Token*],arrIdx/2699 : UInt* in [tokens'/2369]) {
                        const isFound/2697 : Bool* = acc/2686[0];
                        const searchIdx/2694 : UInt* = acc/2686[1];
                        const toksEq/2695 : Bool* = elem/2691 == v2255;
                        const cnd/2696 : Bool* = (isFound/2697 ? true : toksEq/2695);
                        const searchIdx'/2693 : UInt* = searchIdx/2694 + 1;
                        const failAcc/2690 : Tuple(Bool, UInt)* = [false, searchIdx'/2693 ];
                        const succAcc/2688 : Tuple(Bool, UInt)* = [true, searchIdx/2694 ];
                        const bl/2689 : Tuple(Bool, UInt)* = (cnd/2696 ? succAcc/2688 : failAcc/2690);
                        
                        return bl/2689;}
                      const tokIdx/2692 : UInt* = res/2687[1];
                      const isFound'/2698 : Bool* = res/2687[0];
                      claim(CT_Assert)(isFound'/2698, Just "Token is tracked");
                      const tokInfo/2700 : Tuple(UInt, UInt, Bool)* = tokInfos'/2667[tokIdx/2692];
                      const v2262 : UInt* = tokInfo/2700[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2701 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2703 : Tuple(Bool, UInt)* = for (acc/2702 : Tuple(Bool, UInt)* = initAcc/2701; [elem/2707 : Token*],arrIdx/2715 : UInt* in [tokens'/2369]) {
                        const isFound/2713 : Bool* = acc/2702[0];
                        const searchIdx/2710 : UInt* = acc/2702[1];
                        const toksEq/2711 : Bool* = elem/2707 == v2255;
                        const cnd/2712 : Bool* = (isFound/2713 ? true : toksEq/2711);
                        const searchIdx'/2709 : UInt* = searchIdx/2710 + 1;
                        const failAcc/2706 : Tuple(Bool, UInt)* = [false, searchIdx'/2709 ];
                        const succAcc/2704 : Tuple(Bool, UInt)* = [true, searchIdx/2710 ];
                        const bl/2705 : Tuple(Bool, UInt)* = (cnd/2712 ? succAcc/2704 : failAcc/2706);
                        
                        return bl/2705;}
                      const tokIdx/2708 : UInt* = res/2703[1];
                      const isFound'/2714 : Bool* = res/2703[0];
                      claim(CT_Assert)(isFound'/2714, Just "Token is tracked");
                      const tokInfo/2716 : Tuple(UInt, UInt, Bool)* = tokInfos'/2667[tokIdx/2708];
                      const tokInfo'/2718 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2716, 0, v2263 );
                      const tokInfos'/2717 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2667, tokIdx/2708, tokInfo'/2718 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2717,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2667,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case Admin_api_updateLoanTerms_info0_126 as data_id/1415 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1416 : Null;
                  v1416 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2719 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2721 : Tuple(Bool, UInt)* = for (acc/2720 : Tuple(Bool, UInt)* = initAcc/2719; [elem/2725 : Token*],arrIdx/2733 : UInt* in [tokens'/2369]) {
                    const isFound/2731 : Bool* = acc/2720[0];
                    const searchIdx/2728 : UInt* = acc/2720[1];
                    const toksEq/2729 : Bool* = elem/2725 == paymentToken/55;
                    const cnd/2730 : Bool* = (isFound/2731 ? true : toksEq/2729);
                    const searchIdx'/2727 : UInt* = searchIdx/2728 + 1;
                    const failAcc/2724 : Tuple(Bool, UInt)* = [false, searchIdx'/2727 ];
                    const succAcc/2722 : Tuple(Bool, UInt)* = [true, searchIdx/2728 ];
                    const bl/2723 : Tuple(Bool, UInt)* = (cnd/2730 ? succAcc/2722 : failAcc/2724);
                    
                    return bl/2723;}
                  const tokIdx/2726 : UInt* = res/2721[1];
                  const isFound'/2732 : Bool* = res/2721[0];
                  claim(CT_Assert)(isFound'/2732, Just "Token is tracked");
                  const tokInfo/2734 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2726];
                  const v1817 : UInt* = tokInfo/2734[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2735 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2737 : Tuple(Bool, UInt)* = for (acc/2736 : Tuple(Bool, UInt)* = initAcc/2735; [elem/2741 : Token*],arrIdx/2749 : UInt* in [tokens'/2369]) {
                    const isFound/2747 : Bool* = acc/2736[0];
                    const searchIdx/2744 : UInt* = acc/2736[1];
                    const toksEq/2745 : Bool* = elem/2741 == paymentToken/55;
                    const cnd/2746 : Bool* = (isFound/2747 ? true : toksEq/2745);
                    const searchIdx'/2743 : UInt* = searchIdx/2744 + 1;
                    const failAcc/2740 : Tuple(Bool, UInt)* = [false, searchIdx'/2743 ];
                    const succAcc/2738 : Tuple(Bool, UInt)* = [true, searchIdx/2744 ];
                    const bl/2739 : Tuple(Bool, UInt)* = (cnd/2746 ? succAcc/2738 : failAcc/2740);
                    
                    return bl/2739;}
                  const tokIdx/2742 : UInt* = res/2737[1];
                  const isFound'/2748 : Bool* = res/2737[0];
                  claim(CT_Assert)(isFound'/2748, Just "Token is tracked");
                  const tokInfo/2750 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2742];
                  const tokInfo'/2752 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2750, 0, v1818 );
                  const tokInfos'/2751 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2742, tokInfo'/2752 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2753 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2755 : Tuple(Bool, UInt)* = for (acc/2754 : Tuple(Bool, UInt)* = initAcc/2753; [elem/2759 : Token*],arrIdx/2767 : UInt* in [tokens'/2369]) {
                        const isFound/2765 : Bool* = acc/2754[0];
                        const searchIdx/2762 : UInt* = acc/2754[1];
                        const toksEq/2763 : Bool* = elem/2759 == v2255;
                        const cnd/2764 : Bool* = (isFound/2765 ? true : toksEq/2763);
                        const searchIdx'/2761 : UInt* = searchIdx/2762 + 1;
                        const failAcc/2758 : Tuple(Bool, UInt)* = [false, searchIdx'/2761 ];
                        const succAcc/2756 : Tuple(Bool, UInt)* = [true, searchIdx/2762 ];
                        const bl/2757 : Tuple(Bool, UInt)* = (cnd/2764 ? succAcc/2756 : failAcc/2758);
                        
                        return bl/2757;}
                      const tokIdx/2760 : UInt* = res/2755[1];
                      const isFound'/2766 : Bool* = res/2755[0];
                      claim(CT_Assert)(isFound'/2766, Just "Token is tracked");
                      const tokInfo/2768 : Tuple(UInt, UInt, Bool)* = tokInfos'/2751[tokIdx/2760];
                      const v2260 : UInt* = tokInfo/2768[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2769 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2771 : Tuple(Bool, UInt)* = for (acc/2770 : Tuple(Bool, UInt)* = initAcc/2769; [elem/2775 : Token*],arrIdx/2783 : UInt* in [tokens'/2369]) {
                        const isFound/2781 : Bool* = acc/2770[0];
                        const searchIdx/2778 : UInt* = acc/2770[1];
                        const toksEq/2779 : Bool* = elem/2775 == v2255;
                        const cnd/2780 : Bool* = (isFound/2781 ? true : toksEq/2779);
                        const searchIdx'/2777 : UInt* = searchIdx/2778 + 1;
                        const failAcc/2774 : Tuple(Bool, UInt)* = [false, searchIdx'/2777 ];
                        const succAcc/2772 : Tuple(Bool, UInt)* = [true, searchIdx/2778 ];
                        const bl/2773 : Tuple(Bool, UInt)* = (cnd/2780 ? succAcc/2772 : failAcc/2774);
                        
                        return bl/2773;}
                      const tokIdx/2776 : UInt* = res/2771[1];
                      const isFound'/2782 : Bool* = res/2771[0];
                      claim(CT_Assert)(isFound'/2782, Just "Token is tracked");
                      const tokInfo/2784 : Tuple(UInt, UInt, Bool)* = tokInfos'/2751[tokIdx/2776];
                      const v2262 : UInt* = tokInfo/2784[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2785 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2787 : Tuple(Bool, UInt)* = for (acc/2786 : Tuple(Bool, UInt)* = initAcc/2785; [elem/2791 : Token*],arrIdx/2799 : UInt* in [tokens'/2369]) {
                        const isFound/2797 : Bool* = acc/2786[0];
                        const searchIdx/2794 : UInt* = acc/2786[1];
                        const toksEq/2795 : Bool* = elem/2791 == v2255;
                        const cnd/2796 : Bool* = (isFound/2797 ? true : toksEq/2795);
                        const searchIdx'/2793 : UInt* = searchIdx/2794 + 1;
                        const failAcc/2790 : Tuple(Bool, UInt)* = [false, searchIdx'/2793 ];
                        const succAcc/2788 : Tuple(Bool, UInt)* = [true, searchIdx/2794 ];
                        const bl/2789 : Tuple(Bool, UInt)* = (cnd/2796 ? succAcc/2788 : failAcc/2790);
                        
                        return bl/2789;}
                      const tokIdx/2792 : UInt* = res/2787[1];
                      const isFound'/2798 : Bool* = res/2787[0];
                      claim(CT_Assert)(isFound'/2798, Just "Token is tracked");
                      const tokInfo/2800 : Tuple(UInt, UInt, Bool)* = tokInfos'/2751[tokIdx/2792];
                      const tokInfo'/2802 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2800, 0, v2263 );
                      const tokInfos'/2801 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2751, tokIdx/2792, tokInfo'/2802 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2801,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2751,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case user_acceptLoan0_126 as data_id/1417 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1418 : Null;
                  v1418 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2803 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2805 : Tuple(Bool, UInt)* = for (acc/2804 : Tuple(Bool, UInt)* = initAcc/2803; [elem/2809 : Token*],arrIdx/2817 : UInt* in [tokens'/2369]) {
                    const isFound/2815 : Bool* = acc/2804[0];
                    const searchIdx/2812 : UInt* = acc/2804[1];
                    const toksEq/2813 : Bool* = elem/2809 == paymentToken/55;
                    const cnd/2814 : Bool* = (isFound/2815 ? true : toksEq/2813);
                    const searchIdx'/2811 : UInt* = searchIdx/2812 + 1;
                    const failAcc/2808 : Tuple(Bool, UInt)* = [false, searchIdx'/2811 ];
                    const succAcc/2806 : Tuple(Bool, UInt)* = [true, searchIdx/2812 ];
                    const bl/2807 : Tuple(Bool, UInt)* = (cnd/2814 ? succAcc/2806 : failAcc/2808);
                    
                    return bl/2807;}
                  const tokIdx/2810 : UInt* = res/2805[1];
                  const isFound'/2816 : Bool* = res/2805[0];
                  claim(CT_Assert)(isFound'/2816, Just "Token is tracked");
                  const tokInfo/2818 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2810];
                  const v1817 : UInt* = tokInfo/2818[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2819 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2821 : Tuple(Bool, UInt)* = for (acc/2820 : Tuple(Bool, UInt)* = initAcc/2819; [elem/2825 : Token*],arrIdx/2833 : UInt* in [tokens'/2369]) {
                    const isFound/2831 : Bool* = acc/2820[0];
                    const searchIdx/2828 : UInt* = acc/2820[1];
                    const toksEq/2829 : Bool* = elem/2825 == paymentToken/55;
                    const cnd/2830 : Bool* = (isFound/2831 ? true : toksEq/2829);
                    const searchIdx'/2827 : UInt* = searchIdx/2828 + 1;
                    const failAcc/2824 : Tuple(Bool, UInt)* = [false, searchIdx'/2827 ];
                    const succAcc/2822 : Tuple(Bool, UInt)* = [true, searchIdx/2828 ];
                    const bl/2823 : Tuple(Bool, UInt)* = (cnd/2830 ? succAcc/2822 : failAcc/2824);
                    
                    return bl/2823;}
                  const tokIdx/2826 : UInt* = res/2821[1];
                  const isFound'/2832 : Bool* = res/2821[0];
                  claim(CT_Assert)(isFound'/2832, Just "Token is tracked");
                  const tokInfo/2834 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2826];
                  const tokInfo'/2836 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2834, 0, v1818 );
                  const tokInfos'/2835 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2826, tokInfo'/2836 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2837 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2839 : Tuple(Bool, UInt)* = for (acc/2838 : Tuple(Bool, UInt)* = initAcc/2837; [elem/2843 : Token*],arrIdx/2851 : UInt* in [tokens'/2369]) {
                        const isFound/2849 : Bool* = acc/2838[0];
                        const searchIdx/2846 : UInt* = acc/2838[1];
                        const toksEq/2847 : Bool* = elem/2843 == v2255;
                        const cnd/2848 : Bool* = (isFound/2849 ? true : toksEq/2847);
                        const searchIdx'/2845 : UInt* = searchIdx/2846 + 1;
                        const failAcc/2842 : Tuple(Bool, UInt)* = [false, searchIdx'/2845 ];
                        const succAcc/2840 : Tuple(Bool, UInt)* = [true, searchIdx/2846 ];
                        const bl/2841 : Tuple(Bool, UInt)* = (cnd/2848 ? succAcc/2840 : failAcc/2842);
                        
                        return bl/2841;}
                      const tokIdx/2844 : UInt* = res/2839[1];
                      const isFound'/2850 : Bool* = res/2839[0];
                      claim(CT_Assert)(isFound'/2850, Just "Token is tracked");
                      const tokInfo/2852 : Tuple(UInt, UInt, Bool)* = tokInfos'/2835[tokIdx/2844];
                      const v2260 : UInt* = tokInfo/2852[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2853 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2855 : Tuple(Bool, UInt)* = for (acc/2854 : Tuple(Bool, UInt)* = initAcc/2853; [elem/2859 : Token*],arrIdx/2867 : UInt* in [tokens'/2369]) {
                        const isFound/2865 : Bool* = acc/2854[0];
                        const searchIdx/2862 : UInt* = acc/2854[1];
                        const toksEq/2863 : Bool* = elem/2859 == v2255;
                        const cnd/2864 : Bool* = (isFound/2865 ? true : toksEq/2863);
                        const searchIdx'/2861 : UInt* = searchIdx/2862 + 1;
                        const failAcc/2858 : Tuple(Bool, UInt)* = [false, searchIdx'/2861 ];
                        const succAcc/2856 : Tuple(Bool, UInt)* = [true, searchIdx/2862 ];
                        const bl/2857 : Tuple(Bool, UInt)* = (cnd/2864 ? succAcc/2856 : failAcc/2858);
                        
                        return bl/2857;}
                      const tokIdx/2860 : UInt* = res/2855[1];
                      const isFound'/2866 : Bool* = res/2855[0];
                      claim(CT_Assert)(isFound'/2866, Just "Token is tracked");
                      const tokInfo/2868 : Tuple(UInt, UInt, Bool)* = tokInfos'/2835[tokIdx/2860];
                      const v2262 : UInt* = tokInfo/2868[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2869 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2871 : Tuple(Bool, UInt)* = for (acc/2870 : Tuple(Bool, UInt)* = initAcc/2869; [elem/2875 : Token*],arrIdx/2883 : UInt* in [tokens'/2369]) {
                        const isFound/2881 : Bool* = acc/2870[0];
                        const searchIdx/2878 : UInt* = acc/2870[1];
                        const toksEq/2879 : Bool* = elem/2875 == v2255;
                        const cnd/2880 : Bool* = (isFound/2881 ? true : toksEq/2879);
                        const searchIdx'/2877 : UInt* = searchIdx/2878 + 1;
                        const failAcc/2874 : Tuple(Bool, UInt)* = [false, searchIdx'/2877 ];
                        const succAcc/2872 : Tuple(Bool, UInt)* = [true, searchIdx/2878 ];
                        const bl/2873 : Tuple(Bool, UInt)* = (cnd/2880 ? succAcc/2872 : failAcc/2874);
                        
                        return bl/2873;}
                      const tokIdx/2876 : UInt* = res/2871[1];
                      const isFound'/2882 : Bool* = res/2871[0];
                      claim(CT_Assert)(isFound'/2882, Just "Token is tracked");
                      const tokInfo/2884 : Tuple(UInt, UInt, Bool)* = tokInfos'/2835[tokIdx/2876];
                      const tokInfo'/2886 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2884, 0, v2263 );
                      const tokInfos'/2885 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2835, tokIdx/2876, tokInfo'/2886 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2885,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2835,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } }
                case user_makeOffer0_126 as data_id/1419 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                  let v1420 : Null;
                  v1420 : Null = null;
                  const v1406 : Null* = null;
                  let v1422 : Tuple(UInt, Tuple(UInt, Token));
                  local switch (data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as data_id/1423 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const loanOffer/1425 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1423[0];
                      const v1427 : Bool* = this/1403 == Admin/46;
                      const v1428 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1429 : Bool* = (v1427 ? true : v1428);
                      let v1430 : Null;
                      claim(CT_Require)(v1429, Just "The current user trying to access this interface is not Admin");
                      v1430 : Null = null;
                      const x/1445 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1447 : Bool* = (x/1445 ? false : true);
                      let v1448 : Null;
                      claim(CT_Require)(v1447, Just "An offer has already been accepted");
                      v1448 : Null = null;
                      let v1463 : Null;
                      const v1464 : Bool* = returnExpression/79.freeze;
                      const v1465 : Bool* = (v1464 ? true : false);
                      let v1466 : Null;
                      claim(CT_Require)(v1465, Just "Contract is frozen");
                      v1466 : Null = null;
                      v1463 : Null = null;
                      const v1481 : UInt* = loanOffer/1425.amount;
                      const v1482 : Address* = loanOffer/1425.borrower;
                      const v1483 : UInt* = loanOffer/1425.offerId;
                      const v1484 : Bool* = loanOffer/1425.rejected;
                      const m/1485 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1483];
                      const v1487 : UInt* = dataTag(m/1485);
                      const v1488 : Bool* = v1487 == 1;
                      let v1489 : Null;
                      claim(CT_Require)(v1488, Just "Offer id doesn't exist");
                      v1489 : Null = null;
                      const v1504 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1505 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1504 ];
                      const v1506 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1507 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1506 ];
                      const v1508 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1509 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1508 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1509;
                       }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as data_id/1510 : Tuple(UInt)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1512 : UInt* = .api75.dom/1510[0];
                      const v1514 : Bool* = this/1403 == Admin/46;
                      const v1515 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1516 : Bool* = (v1514 ? true : v1515);
                      let v1517 : Null;
                      claim(CT_Require)(v1516, Just "The current user trying to access this interface is not Admin");
                      v1517 : Null = null;
                      const x/1532 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1534 : Bool* = (x/1532 ? false : true);
                      let v1535 : Null;
                      claim(CT_Require)(v1534, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1535 : Null = null;
                      let v1550 : Null;
                      const v1551 : Bool* = returnExpression/79.freeze;
                      const v1552 : Bool* = (v1551 ? true : false);
                      let v1553 : Null;
                      claim(CT_Require)(v1552, Just "Contract is frozen");
                      v1553 : Null = null;
                      v1550 : Null = null;
                      const v1568 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1569 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1568 ];
                      const v1570 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1571 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1570 ];
                      const v1572 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1573 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1572 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1573;
                       }
                    case Admin_api_freeze0_126 as data_id/1574 : Tuple(Bool)* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const toggle/1576 : Bool* = .api73.dom/1574[0];
                      const v1578 : Bool* = this/1403 == Admin/46;
                      const v1579 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1580 : Bool* = (v1578 ? true : v1579);
                      let v1581 : Null;
                      claim(CT_Require)(v1580, Just "The current user trying to access this interface is not Admin");
                      v1581 : Null = null;
                      const x/1596 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1598 : Bool* = (x/1596 ? false : true);
                      let v1599 : Null;
                      claim(CT_Require)(v1598, Just "Cannot update config after Loan terms accepted");
                      v1599 : Null = null;
                      const v1614 : Bool* = returnExpression/79.freeze;
                      const v1615 : Bool* = (v1614 ? false : true);
                      const x/1616 : Bool* = (toggle/1576 ? v1614 : v1615);
                      const v1618 : Bool* = (x/1616 ? false : true);
                      let v1619 : Null;
                      claim(CT_Require)(v1618, Just "The action you are trying to perform has already been done");
                      v1619 : Null = null;
                      const v1634 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1635 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1634 ];
                      const v1636 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1637 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1636 ];
                      const v1638 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1639 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1638 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1639;
                       }
                    case Admin_api_updateConfig0_126 as data_id/1640 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1642 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/1640[0];
                      const v1644 : Bool* = this/1403 == Admin/46;
                      const v1645 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1646 : Bool* = (v1644 ? true : v1645);
                      let v1647 : Null;
                      claim(CT_Require)(v1646, Just "The current user trying to access this interface is not Admin");
                      v1647 : Null = null;
                      const x/1662 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1664 : Bool* = (x/1662 ? false : true);
                      let v1665 : Null;
                      claim(CT_Require)(v1664, Just "Cannot update config after Loan terms accepted");
                      v1665 : Null = null;
                      const v1680 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1681 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1680 ];
                      const v1682 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1683 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1682 ];
                      const v1684 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1685 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1684 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1685;
                       }
                    case Admin_api_updateLoanTerms_info0_126 as data_id/1686 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const local_config/1688 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/1686[0];
                      const v1690 : Bool* = this/1403 == Admin/46;
                      const v1691 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1692 : Bool* = (v1690 ? true : v1691);
                      let v1693 : Null;
                      claim(CT_Require)(v1692, Just "The current user trying to access this interface is not Admin");
                      v1693 : Null = null;
                      const x/1708 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1710 : Bool* = (x/1708 ? false : true);
                      let v1711 : Null;
                      claim(CT_Require)(v1710, Just "Cannot update loan terms after Loan terms accepted");
                      v1711 : Null = null;
                      const v1726 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1727 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1726 ];
                      const v1728 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1729 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1728 ];
                      const v1730 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1731 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1730 ];
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1731;
                       }
                    case user_acceptLoan0_126 as data_id/1732 : Tuple()* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      let v1735 : Null;
                      const v1736 : Bool* = returnExpression/79.freeze;
                      const v1737 : Bool* = (v1736 ? true : false);
                      let v1738 : Null;
                      claim(CT_Require)(v1737, Just "Contract is frozen");
                      v1738 : Null = null;
                      v1735 : Null = null;
                      const acceptedAmount/1753 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/1754 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1756 : Bool* = (x/1754 ? false : true);
                      let v1757 : Null;
                      claim(CT_Require)(v1756, Just "Offer already accepted");
                      v1757 : Null = null;
                      const v1772 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1773 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1774 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/1753, v1773 ];
                      const v1775 : Tuple(UInt, Token)* = [acceptedAmount/1753, paymentToken/55 ];
                      const v1776 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1775 ];
                      const transferData/1777 : Tuple(UInt, Tuple(UInt, Token))* = (v1772 ? v1774 : v1776);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = transferData/1777;
                       }
                    case user_makeOffer0_126 as data_id/1778 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from data_id/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      const v1780 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/1778[0];
                      const amount/1782 : UInt* = v1780.amount;
                      const shouldPayWithNetworkToken/1783 : Bool* = v1780.shouldPayWithNetworkToken;
                      let v1784 : Null;
                      const v1785 : Bool* = returnExpression/79.freeze;
                      const v1786 : Bool* = (v1785 ? true : false);
                      let v1787 : Null;
                      claim(CT_Require)(v1786, Just "Contract is frozen");
                      v1787 : Null = null;
                      v1784 : Null = null;
                      const v1802 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v1803 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v1804 : Tuple(UInt, Tuple(UInt, Token))* = [amount/1782, v1803 ];
                      const v1805 : Tuple(UInt, Token)* = [amount/1782, paymentToken/55 ];
                      const v1806 : Tuple(UInt, Tuple(UInt, Token))* = [0, v1805 ];
                      const v1807 : Tuple(UInt, Tuple(UInt, Token))* = (v1802 ? v1804 : v1806);
                      v1422 : Tuple(UInt, Tuple(UInt, Token)) = v1807;
                       } }
                  const networkTokenPay/1808 : UInt* = v1422[0];
                  const v1809 : Tuple(UInt, Token)* = v1422[1];
                  const amt0/1810 : UInt* = v1809[0];
                  const nntok0/1811 : Token* = v1809[1];
                  const v1812 : Bool* = nntok0/1811 == paymentToken/55;
                  claim(CT_Assert)(v1812, Just "Expected the non-network token at position 1 in `case` payment to be equal to paymentToken as specified in `.paySpec`");
                  const v1813 : Tuple(UInt, Token)* = [amt0/1810, paymentToken/55 ];
                  const v1814 : Tuple(UInt, Tuple(UInt, Token))* = [networkTokenPay/1808, v1813 ];
                  const netBalance/1815 : UInt* = netBalance/2382;
                  const v1816 : UInt* = netBalance/1815 + networkTokenPay/1808;
                  checkPay(networkTokenPay/1808, None);
                  const initAcc/2887 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2889 : Tuple(Bool, UInt)* = for (acc/2888 : Tuple(Bool, UInt)* = initAcc/2887; [elem/2893 : Token*],arrIdx/2901 : UInt* in [tokens'/2369]) {
                    const isFound/2899 : Bool* = acc/2888[0];
                    const searchIdx/2896 : UInt* = acc/2888[1];
                    const toksEq/2897 : Bool* = elem/2893 == paymentToken/55;
                    const cnd/2898 : Bool* = (isFound/2899 ? true : toksEq/2897);
                    const searchIdx'/2895 : UInt* = searchIdx/2896 + 1;
                    const failAcc/2892 : Tuple(Bool, UInt)* = [false, searchIdx'/2895 ];
                    const succAcc/2890 : Tuple(Bool, UInt)* = [true, searchIdx/2896 ];
                    const bl/2891 : Tuple(Bool, UInt)* = (cnd/2898 ? succAcc/2890 : failAcc/2892);
                    
                    return bl/2891;}
                  const tokIdx/2894 : UInt* = res/2889[1];
                  const isFound'/2900 : Bool* = res/2889[0];
                  claim(CT_Assert)(isFound'/2900, Just "Token is tracked");
                  const tokInfo/2902 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2894];
                  const v1817 : UInt* = tokInfo/2902[0];
                  const v1818 : UInt* = v1817 + amt0/1810;
                  const initAcc/2903 : Tuple(Bool, UInt)* = [false, 0 ];
                  reduce res/2905 : Tuple(Bool, UInt)* = for (acc/2904 : Tuple(Bool, UInt)* = initAcc/2903; [elem/2909 : Token*],arrIdx/2917 : UInt* in [tokens'/2369]) {
                    const isFound/2915 : Bool* = acc/2904[0];
                    const searchIdx/2912 : UInt* = acc/2904[1];
                    const toksEq/2913 : Bool* = elem/2909 == paymentToken/55;
                    const cnd/2914 : Bool* = (isFound/2915 ? true : toksEq/2913);
                    const searchIdx'/2911 : UInt* = searchIdx/2912 + 1;
                    const failAcc/2908 : Tuple(Bool, UInt)* = [false, searchIdx'/2911 ];
                    const succAcc/2906 : Tuple(Bool, UInt)* = [true, searchIdx/2912 ];
                    const bl/2907 : Tuple(Bool, UInt)* = (cnd/2914 ? succAcc/2906 : failAcc/2908);
                    
                    return bl/2907;}
                  const tokIdx/2910 : UInt* = res/2905[1];
                  const isFound'/2916 : Bool* = res/2905[0];
                  claim(CT_Assert)(isFound'/2916, Just "Token is tracked");
                  const tokInfo/2918 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[tokIdx/2910];
                  const tokInfo'/2920 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2918, 0, v1818 );
                  const tokInfos'/2919 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, tokIdx/2910, tokInfo'/2920 );
                  checkPay(amt0/1810, Some paymentToken/55);
                  switch (.fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})) {
                    case Admin_api_acceptOffer0_126 as .fork126.msg/1822 : Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_acceptOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_acceptOffer0_126, AIC_Case );
                      const loanOffer/1824 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1825 : Bool* = this/1403 == Admin/46;
                      const v1826 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1827 : Bool* = (v1825 ? true : v1826);
                      let v1828 : Null;
                      claim(CT_Require)(v1827, Just "The current user trying to access this interface is not Admin");
                      v1828 : Null = null;
                      const x/1843 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1845 : Bool* = (x/1843 ? false : true);
                      let v1846 : Null;
                      claim(CT_Require)(v1845, Just "An offer has already been accepted");
                      v1846 : Null = null;
                      let v1861 : Null;
                      const v1862 : Bool* = returnExpression/79.freeze;
                      const v1863 : Bool* = (v1862 ? true : false);
                      let v1864 : Null;
                      claim(CT_Require)(v1863, Just "Contract is frozen");
                      v1864 : Null = null;
                      v1861 : Null = null;
                      const v1879 : UInt* = loanOffer/1824.amount;
                      const v1880 : Address* = loanOffer/1824.borrower;
                      const v1881 : UInt* = loanOffer/1824.offerId;
                      const v1882 : Bool* = loanOffer/1824.rejected;
                      const offerInfo/1883 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[v1881];
                      const v1885 : UInt* = dataTag(m/1883);
                      const v1886 : Bool* = v1885 == 1;
                      let v1887 : Null;
                      claim(CT_Require)(v1886, Just "Offer id doesn't exist");
                      v1887 : Null = null;
                      const _/1902 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                      const v1903 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = 0,
                        borrower = this/1403,
                        offerId = 0,
                        rejected = false};
                      const data/1904 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = fromSome(offerInfo/1883, v1903 );
                      const v1906 : Null* = null;
                      const .api76.rngl/1907 : Null* = emitLog(api("Admin_api_acceptOffer"))(v1906 );
                      only(Left "Admin_api_acceptOffer") {
                        const v1909 : Address* = selfAddress("Admin_api_acceptOffer", True, 1908 )();
                        let v1910 : Null;
                        const didPublish/1911 : Bool* = didPublish/1821;
                        local(Just v1910 : Null) if didPublish/1911 then {
                          const v1912 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = .api76.dom/1822[0];
                          const v1913 : UInt* = v1912.amount;
                          const v1914 : Address* = v1912.borrower;
                          const v1915 : UInt* = v1912.offerId;
                          const v1916 : Bool* = v1912.rejected;
                          protect<Null>("Admin_api_acceptOffer".interact.out(.api76.dom/1822, .api76.rngl/1907 ));
                           }
                        else {
                           };
                        v1910 : Null = null;
                         };
                      const v1905 : Null* = null;
                      const v1917 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1918 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1919 : Bool* = returnExpression/79.continue;
                      const v1920 : Bool* = returnExpression/79.freeze;
                      const v1921 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1922 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1923 : UInt* = returnExpression/79.offers;
                      const v1924 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      const v1925 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1917,
                        config = v1918,
                        continue = v1919,
                        freeze = v1920,
                        loanTerms = v1921,
                        loanTermsAccepted = true,
                        offers = v1923};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v1925,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_cancelLoanOfferandWithdrawCollateral0_126 as .fork126.msg/1926 : Tuple(UInt)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_cancelLoanOfferandWithdrawCollateral", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_cancelLoanOfferandWithdrawCollateral0_126, AIC_Case );
                      const local_config/1928 : UInt* = .api75.dom/1926[0];
                      const v1929 : Bool* = this/1403 == Admin/46;
                      const v1930 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v1931 : Bool* = (v1929 ? true : v1930);
                      let v1932 : Null;
                      claim(CT_Require)(v1931, Just "The current user trying to access this interface is not Admin");
                      v1932 : Null = null;
                      const x/1947 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1949 : Bool* = (x/1947 ? false : true);
                      let v1950 : Null;
                      claim(CT_Require)(v1949, Just "Cannot cancel loan or withdraw collateral when loan terms have been accepted");
                      v1950 : Null = null;
                      let v1965 : Null;
                      const v1966 : Bool* = returnExpression/79.freeze;
                      const v1967 : Bool* = (v1966 ? true : false);
                      let v1968 : Null;
                      claim(CT_Require)(v1967, Just "Contract is frozen");
                      v1968 : Null = null;
                      v1965 : Null = null;
                      const _/1983 : UInt* = .api75.dom/1926[0];
                      const v1985 : Null* = null;
                      const .api75.rngl/1986 : Null* = emitLog(api("Admin_api_cancelLoanOfferandWithdrawCollateral"))(v1985 );
                      only(Left "Admin_api_cancelLoanOfferandWithdrawCollateral") {
                        const v1988 : Address* = selfAddress("Admin_api_cancelLoanOfferandWithdrawCollateral", True, 1987 )();
                        let v1989 : Null;
                        const didPublish/1990 : Bool* = didPublish/1821;
                        local(Just v1989 : Null) if didPublish/1990 then {
                          const v1991 : UInt* = .api75.dom/1926[0];
                          protect<Null>("Admin_api_cancelLoanOfferandWithdrawCollateral".interact.out(.api75.dom/1926, .api75.rngl/1986 ));
                           }
                        else {
                           };
                        v1989 : Null = null;
                         };
                      const v1984 : Null* = null;
                      const v1992 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v1993 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v1994 : Bool* = returnExpression/79.continue;
                      const v1995 : Bool* = returnExpression/79.freeze;
                      const v1996 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v1997 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v1998 : UInt* = returnExpression/79.offers;
                      const v1999 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      const v2000 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v1992,
                        config = v1993,
                        continue = false,
                        freeze = v1995,
                        loanTerms = v1996,
                        loanTermsAccepted = v1997,
                        offers = v1998};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2000,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_freeze0_126 as .fork126.msg/2001 : Tuple(Bool)* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_freeze", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_freeze0_126, AIC_Case );
                      const toggle/2003 : Bool* = .api73.dom/2001[0];
                      const v2004 : Bool* = this/1403 == Admin/46;
                      const v2005 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2006 : Bool* = (v2004 ? true : v2005);
                      let v2007 : Null;
                      claim(CT_Require)(v2006, Just "The current user trying to access this interface is not Admin");
                      v2007 : Null = null;
                      const x/2022 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2024 : Bool* = (x/2022 ? false : true);
                      let v2025 : Null;
                      claim(CT_Require)(v2024, Just "Cannot update config after Loan terms accepted");
                      v2025 : Null = null;
                      const v2040 : Bool* = returnExpression/79.freeze;
                      const v2041 : Bool* = (v2040 ? false : true);
                      const x/2042 : Bool* = (toggle/2003 ? v2040 : v2041);
                      const v2044 : Bool* = (x/2042 ? false : true);
                      let v2045 : Null;
                      claim(CT_Require)(v2044, Just "The action you are trying to perform has already been done");
                      v2045 : Null = null;
                      const _/2060 : Bool* = .api73.dom/2001[0];
                      const v2062 : Null* = null;
                      const .api73.rngl/2063 : Null* = emitLog(api("Admin_api_freeze"))(v2062 );
                      only(Left "Admin_api_freeze") {
                        const v2065 : Address* = selfAddress("Admin_api_freeze", True, 2064 )();
                        let v2066 : Null;
                        const didPublish/2067 : Bool* = didPublish/1821;
                        local(Just v2066 : Null) if didPublish/2067 then {
                          const v2068 : Bool* = .api73.dom/2001[0];
                          protect<Null>("Admin_api_freeze".interact.out(.api73.dom/2001, .api73.rngl/2063 ));
                           }
                        else {
                           };
                        v2066 : Null = null;
                         };
                      const v2061 : Null* = null;
                      const v2069 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2070 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2071 : Bool* = returnExpression/79.continue;
                      const v2072 : Bool* = returnExpression/79.freeze;
                      const v2073 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2074 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2075 : UInt* = returnExpression/79.offers;
                      const v2076 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      const v2077 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2069,
                        config = v2070,
                        continue = v2071,
                        freeze = toggle/2003,
                        loanTerms = v2073,
                        loanTermsAccepted = v2074,
                        offers = v2075};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2077,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateConfig0_126 as .fork126.msg/2078 : Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateConfig", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateConfig0_126, AIC_Case );
                      const local_config/2080 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2081 : Bool* = this/1403 == Admin/46;
                      const v2082 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2083 : Bool* = (v2081 ? true : v2082);
                      let v2084 : Null;
                      claim(CT_Require)(v2083, Just "The current user trying to access this interface is not Admin");
                      v2084 : Null = null;
                      const x/2099 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2101 : Bool* = (x/2099 ? false : true);
                      let v2102 : Null;
                      claim(CT_Require)(v2101, Just "Cannot update config after Loan terms accepted");
                      v2102 : Null = null;
                      const _/2117 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                      const v2119 : Null* = null;
                      const .api72.rngl/2120 : Null* = emitLog(api("Admin_api_updateConfig"))(v2119 );
                      only(Left "Admin_api_updateConfig") {
                        const v2122 : Address* = selfAddress("Admin_api_updateConfig", True, 2121 )();
                        let v2123 : Null;
                        const didPublish/2124 : Bool* = didPublish/1821;
                        local(Just v2123 : Null) if didPublish/2124 then {
                          const v2125 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = .api72.dom/2078[0];
                          const v2126 : Token* = v2125.token;
                          const v2127 : UInt* = v2125.number_of_tokens_to_deposit;
                          const v2128 : Token* = v2125.paymentAsset;
                          const v2129 : Bool* = v2125.shouldPayInOnlyNetworkToken;
                          const v2130 : Bool* = v2125.prefersNetworkToken;
                          protect<Null>("Admin_api_updateConfig".interact.out(.api72.dom/2078, .api72.rngl/2120 ));
                           }
                        else {
                           };
                        v2123 : Null = null;
                         };
                      const v2118 : Null* = null;
                      const v2131 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2132 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2133 : Bool* = returnExpression/79.continue;
                      const v2134 : Bool* = returnExpression/79.freeze;
                      const v2135 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2136 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2137 : UInt* = returnExpression/79.offers;
                      const v2138 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      const v2139 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2131,
                        config = local_config/2080,
                        continue = v2133,
                        freeze = v2134,
                        loanTerms = v2135,
                        loanTermsAccepted = v2136,
                        offers = v2137};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2139,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case Admin_api_updateLoanTerms_info0_126 as .fork126.msg/2140 : Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("Admin_api_updateLoanTerms_info", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some Admin_api_updateLoanTerms_info0_126, AIC_Case );
                      const local_config/2142 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2143 : Bool* = this/1403 == Admin/46;
                      const v2144 : Bool* = ADMIN_WALLET/51 == this/1403;
                      const v2145 : Bool* = (v2143 ? true : v2144);
                      let v2146 : Null;
                      claim(CT_Require)(v2145, Just "The current user trying to access this interface is not Admin");
                      v2146 : Null = null;
                      const x/2161 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2163 : Bool* = (x/2161 ? false : true);
                      let v2164 : Null;
                      claim(CT_Require)(v2163, Just "Cannot update loan terms after Loan terms accepted");
                      v2164 : Null = null;
                      const _/2179 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                      const v2181 : Null* = null;
                      const .api74.rngl/2182 : Null* = emitLog(api("Admin_api_updateLoanTerms_info"))(v2181 );
                      only(Left "Admin_api_updateLoanTerms_info") {
                        const v2184 : Address* = selfAddress("Admin_api_updateLoanTerms_info", True, 2183 )();
                        let v2185 : Null;
                        const didPublish/2186 : Bool* = didPublish/1821;
                        local(Just v2185 : Null) if didPublish/2186 then {
                          const v2187 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = .api74.dom/2140[0];
                          const v2188 : UInt* = v2187.duration_in_blocks;
                          const v2189 : UInt* = v2187.principle;
                          const v2190 : Token* = v2187.interest;
                          protect<Null>("Admin_api_updateLoanTerms_info".interact.out(.api74.dom/2140, .api74.rngl/2182 ));
                           }
                        else {
                           };
                        v2185 : Null = null;
                         };
                      const v2180 : Null* = null;
                      const v2191 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2192 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2193 : Bool* = returnExpression/79.continue;
                      const v2194 : Bool* = returnExpression/79.freeze;
                      const v2195 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2196 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2197 : UInt* = returnExpression/79.offers;
                      const v2198 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      const v2199 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2191,
                        config = v2192,
                        continue = v2193,
                        freeze = v2194,
                        loanTerms = local_config/2142,
                        loanTermsAccepted = v2196,
                        offers = v2197};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2199,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; }
                    case user_acceptLoan0_126 as .fork126.msg/2200 : Tuple()* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_acceptLoan", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_acceptLoan0_126, AIC_Case );
                      let v2202 : Null;
                      const v2203 : Bool* = returnExpression/79.freeze;
                      const v2204 : Bool* = (v2203 ? true : false);
                      let v2205 : Null;
                      claim(CT_Require)(v2204, Just "Contract is frozen");
                      v2205 : Null = null;
                      v2202 : Null = null;
                      const acceptedAmount/2220 : UInt* = config_as_object/47.number_of_tokens_to_deposit;
                      const x/2221 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2223 : Bool* = (x/2221 ? false : true);
                      let v2224 : Null;
                      claim(CT_Require)(v2223, Just "Offer already accepted");
                      v2224 : Null = null;
                      const v2239 : Bool* = config_as_object/47.prefersNetworkToken;
                      const v2240 : Tuple(UInt, Token)* = [0, paymentToken/55 ];
                      const v2241 : Tuple(UInt, Tuple(UInt, Token))* = [acceptedAmount/2220, v2240 ];
                      const v2242 : Tuple(UInt, Token)* = [acceptedAmount/2220, paymentToken/55 ];
                      const v2243 : Tuple(UInt, Tuple(UInt, Token))* = [0, v2242 ];
                      const transferData/2244 : Tuple(UInt, Tuple(UInt, Token))* = (v2239 ? v2241 : v2243);
                      const v2246 : Null* = null;
                      const .api77.rngl/2247 : Null* = emitLog(api("user_acceptLoan"))(v2246 );
                      only(Left "user_acceptLoan") {
                        const v2249 : Address* = selfAddress("user_acceptLoan", True, 2248 )();
                        let v2250 : Null;
                        const didPublish/2251 : Bool* = didPublish/1821;
                        local(Just v2250 : Null) if didPublish/2251 then {
                          protect<Null>("user_acceptLoan".interact.out(.api77.dom/2200, .api77.rngl/2247 ));
                           }
                        else {
                           };
                        v2250 : Null = null;
                         };
                      const v2245 : Null* = null;
                      const v2252 : UInt* = transferData/2244[0];
                      const v2253 : Tuple(UInt, Token)* = transferData/2244[1];
                      const v2254 : UInt* = v2253[0];
                      const v2255 : Token* = v2253[1];
                      const netBalance/2256 : UInt* = v1816;
                      const v2257 : Bool* = v2252 <= netBalance/2256;
                      claim(CT_Assert)(v2257, Just "balance sufficient for transfer");
                      const netBalance/2258 : UInt* = v1816;
                      const v2259 : UInt* = netBalance/2258 - v2252;
                      transfer.(v2252, None).to(Admin/46);
                      const initAcc/2921 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2923 : Tuple(Bool, UInt)* = for (acc/2922 : Tuple(Bool, UInt)* = initAcc/2921; [elem/2927 : Token*],arrIdx/2935 : UInt* in [tokens'/2369]) {
                        const isFound/2933 : Bool* = acc/2922[0];
                        const searchIdx/2930 : UInt* = acc/2922[1];
                        const toksEq/2931 : Bool* = elem/2927 == v2255;
                        const cnd/2932 : Bool* = (isFound/2933 ? true : toksEq/2931);
                        const searchIdx'/2929 : UInt* = searchIdx/2930 + 1;
                        const failAcc/2926 : Tuple(Bool, UInt)* = [false, searchIdx'/2929 ];
                        const succAcc/2924 : Tuple(Bool, UInt)* = [true, searchIdx/2930 ];
                        const bl/2925 : Tuple(Bool, UInt)* = (cnd/2932 ? succAcc/2924 : failAcc/2926);
                        
                        return bl/2925;}
                      const tokIdx/2928 : UInt* = res/2923[1];
                      const isFound'/2934 : Bool* = res/2923[0];
                      claim(CT_Assert)(isFound'/2934, Just "Token is tracked");
                      const tokInfo/2936 : Tuple(UInt, UInt, Bool)* = tokInfos'/2919[tokIdx/2928];
                      const v2260 : UInt* = tokInfo/2936[0];
                      const v2261 : Bool* = v2254 <= v2260;
                      claim(CT_Assert)(v2261, Just "balance sufficient for transfer");
                      const initAcc/2937 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2939 : Tuple(Bool, UInt)* = for (acc/2938 : Tuple(Bool, UInt)* = initAcc/2937; [elem/2943 : Token*],arrIdx/2951 : UInt* in [tokens'/2369]) {
                        const isFound/2949 : Bool* = acc/2938[0];
                        const searchIdx/2946 : UInt* = acc/2938[1];
                        const toksEq/2947 : Bool* = elem/2943 == v2255;
                        const cnd/2948 : Bool* = (isFound/2949 ? true : toksEq/2947);
                        const searchIdx'/2945 : UInt* = searchIdx/2946 + 1;
                        const failAcc/2942 : Tuple(Bool, UInt)* = [false, searchIdx'/2945 ];
                        const succAcc/2940 : Tuple(Bool, UInt)* = [true, searchIdx/2946 ];
                        const bl/2941 : Tuple(Bool, UInt)* = (cnd/2948 ? succAcc/2940 : failAcc/2942);
                        
                        return bl/2941;}
                      const tokIdx/2944 : UInt* = res/2939[1];
                      const isFound'/2950 : Bool* = res/2939[0];
                      claim(CT_Assert)(isFound'/2950, Just "Token is tracked");
                      const tokInfo/2952 : Tuple(UInt, UInt, Bool)* = tokInfos'/2919[tokIdx/2944];
                      const v2262 : UInt* = tokInfo/2952[0];
                      const v2263 : UInt* = v2262 - v2254;
                      const initAcc/2953 : Tuple(Bool, UInt)* = [false, 0 ];
                      reduce res/2955 : Tuple(Bool, UInt)* = for (acc/2954 : Tuple(Bool, UInt)* = initAcc/2953; [elem/2959 : Token*],arrIdx/2967 : UInt* in [tokens'/2369]) {
                        const isFound/2965 : Bool* = acc/2954[0];
                        const searchIdx/2962 : UInt* = acc/2954[1];
                        const toksEq/2963 : Bool* = elem/2959 == v2255;
                        const cnd/2964 : Bool* = (isFound/2965 ? true : toksEq/2963);
                        const searchIdx'/2961 : UInt* = searchIdx/2962 + 1;
                        const failAcc/2958 : Tuple(Bool, UInt)* = [false, searchIdx'/2961 ];
                        const succAcc/2956 : Tuple(Bool, UInt)* = [true, searchIdx/2962 ];
                        const bl/2957 : Tuple(Bool, UInt)* = (cnd/2964 ? succAcc/2956 : failAcc/2958);
                        
                        return bl/2957;}
                      const tokIdx/2960 : UInt* = res/2955[1];
                      const isFound'/2966 : Bool* = res/2955[0];
                      claim(CT_Assert)(isFound'/2966, Just "Token is tracked");
                      const tokInfo/2968 : Tuple(UInt, UInt, Bool)* = tokInfos'/2919[tokIdx/2960];
                      const tokInfo'/2970 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2968, 0, v2263 );
                      const tokInfos'/2969 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokInfos'/2919, tokIdx/2960, tokInfo'/2970 );
                      transfer.(v2254, Some v2255).to(Admin/46);
                      const v2264 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2265 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2266 : Bool* = returnExpression/79.continue;
                      const v2267 : Bool* = returnExpression/79.freeze;
                      const v2268 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2269 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2270 : UInt* = returnExpression/79.offers;
                      const v2271 : UInt* = returnExpression/79.offers;
                      const v2272 : UInt* = v2271 + 1;
                      const v2274 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2275 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2274,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      const v2276 : Data({"None": Null, "Some": Address})* = <Some this/1403>;
                      const v2277 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2276,
                        config = v2265,
                        continue = v2266,
                        freeze = v2267,
                        loanTerms = v2268,
                        loanTermsAccepted = true,
                        offers = v2272};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2277,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2969,
                        netBalance/2382 : UInt = v2259
                        }
                      continue; }
                    case user_makeOffer0_126 as .fork126.msg/2278 : Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))* from .fork126.msg/1404 : Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))}): {
                      setApiDetails("user_makeOffer", [Data({"Admin_api_acceptOffer0_126": Tuple(Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})), "Admin_api_cancelLoanOfferandWithdrawCollateral0_126": Tuple(UInt), "Admin_api_freeze0_126": Tuple(Bool), "Admin_api_updateConfig0_126": Tuple(Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])), "Admin_api_updateLoanTerms_info0_126": Tuple(Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])), "user_acceptLoan0_126": Tuple(), "user_makeOffer0_126": Tuple(Object({"amount": UInt, "shouldPayWithNetworkToken": Bool}))})], Some user_makeOffer0_126, AIC_Case );
                      const v2280 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const amount/2281 : UInt* = v2280.amount;
                      const shouldPayWithNetworkToken/2282 : Bool* = v2280.shouldPayWithNetworkToken;
                      let v2283 : Null;
                      const v2284 : Bool* = returnExpression/79.freeze;
                      const v2285 : Bool* = (v2284 ? true : false);
                      let v2286 : Null;
                      claim(CT_Require)(v2285, Just "Contract is frozen");
                      v2286 : Null = null;
                      v2283 : Null = null;
                      const _/2301 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                      const v2302 : UInt* = returnExpression/79.offers;
                      const v2303 : UInt* = returnExpression/79.offers;
                      const v2304 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2303,
                        rejected = false};
                      map0[v2302] = v2304;
                      const v2305 : UInt* = returnExpression/79.offers;
                      const v2307 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = {
                        amount = amount/2281,
                        borrower = this/1403,
                        offerId = v2305,
                        rejected = false};
                      const .api78.rngl/2308 : Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})* = emitLog(api("user_makeOffer"))(v2307 );
                      only(Left "user_makeOffer") {
                        const v2310 : Address* = selfAddress("user_makeOffer", True, 2309 )();
                        let v2311 : Null;
                        const didPublish/2312 : Bool* = didPublish/1821;
                        local(Just v2311 : Null) if didPublish/2312 then {
                          const v2313 : Object({"amount": UInt, "shouldPayWithNetworkToken": Bool})* = .api78.dom/2278[0];
                          const v2314 : UInt* = v2313.amount;
                          const v2315 : Bool* = v2313.shouldPayWithNetworkToken;
                          const v2316 : UInt* = .api78.rngl/2308.amount;
                          const v2317 : Address* = .api78.rngl/2308.borrower;
                          const v2318 : UInt* = .api78.rngl/2308.offerId;
                          const v2319 : Bool* = .api78.rngl/2308.rejected;
                          protect<Null>("user_makeOffer".interact.out(.api78.dom/2278, .api78.rngl/2308 ));
                           }
                        else {
                           };
                        v2311 : Null = null;
                         };
                      const v2306 : Null* = null;
                      const v2320 : Data({"None": Null, "Some": Address})* = returnExpression/79.acceptedAddress;
                      const v2321 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
                      const v2322 : Bool* = returnExpression/79.continue;
                      const v2323 : Bool* = returnExpression/79.freeze;
                      const v2324 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
                      const v2325 : Bool* = returnExpression/79.loanTermsAccepted;
                      const v2326 : UInt* = returnExpression/79.offers;
                      const v2327 : UInt* = returnExpression/79.offers;
                      const v2328 : UInt* = v2327 + 1;
                      const v2329 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      const v2330 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt})* = {
                        acceptedAddress = v2320,
                        config = v2321,
                        continue = v2322,
                        freeze = v2323,
                        loanTerms = v2324,
                        loanTermsAccepted = v2325,
                        offers = v2328};
                      {
                        returnExpression/79 : Object({"acceptedAddress": Data({"None": Null, "Some": Address}), "config": Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]]), "continue": Bool, "freeze": Bool, "loanTerms": Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]]), "loanTermsAccepted": Bool, "offers": UInt}) = v2330,
                        thisConsensusTime/2374 : UInt = thisConsensusTime/1819,
                        lastConsensusTime/2375 : UInt = thisConsensusTime/2374,
                        baseWaitTime/2376 : UInt = thisConsensusTime/2374,
                        thisConsensusSecs/2377 : UInt = thisConsensusSecs/1820,
                        lastConsensusSecs/2378 : UInt = thisConsensusSecs/2377,
                        baseWaitSecs/2379 : UInt = thisConsensusSecs/2377,
                        tokenInfos/2380 : Array(Tuple(UInt, UInt, Bool), 1) = tokInfos'/2919,
                        netBalance/2382 : UInt = v1816
                        }
                      continue; } } } } }
             }
        const v2331 : Struct([['"token"', Token], ['"number_of_tokens_to_deposit"', UInt], ['"paymentAsset"', Token], ['"shouldPayInOnlyNetworkToken"', Bool], ['"prefersNetworkToken"', Bool]])* = returnExpression/79.config;
        const v2332 : Token* = v2331.token;
        const v2333 : UInt* = v2331.number_of_tokens_to_deposit;
        const v2334 : Token* = v2331.paymentAsset;
        const v2335 : Bool* = v2331.shouldPayInOnlyNetworkToken;
        const v2336 : Bool* = v2331.prefersNetworkToken;
        view(Just "info").config.is(Just export (Nothing) => {
        return v2331;})
        const v2337 : Struct([['"duration_in_blocks"', UInt], ['"principle"', UInt], ['"interest"', Token]])* = returnExpression/79.loanTerms;
        const v2338 : UInt* = v2337.duration_in_blocks;
        const v2339 : UInt* = v2337.principle;
        const v2340 : Token* = v2337.interest;
        view(Just "info").loanTerms.is(Just export (Nothing) => {
        return v2337;})
        view(Just "info").offer.is(Just export (Just [v2341 : UInt*]) => {const v2343 : Data({"None": Null, "Some": Object({"amount": UInt, "borrower": Address, "offerId": UInt, "rejected": Bool})})* = map0[res/2341];
        
        return v2343;})
        commit();
        only(Left "Admin") {
           };
        publish(@thisConsensusTime/2374)
          .case("Admin").send({
            isClass = False,
            msg = [],
            pay = [0, ],
            when = true
            })
          .recv({
            didSend = didPublish/2348 : Bool,
            from = Admin/2344 : Address,
            msg = [],
            secs = thisConsensusSecs/2347 : UInt,
            time = thisConsensusTime/2346 : UInt
            }){
            timeOrder(>, Just thisConsensusTime/2374, thisConsensusTime/2346 : UInt);
            timeOrder(>=, Just thisConsensusSecs/2377, thisConsensusSecs/2347 : UInt);
            checkPay(0, None);
            const v2345 : Bool* = Admin/46 == Admin/2344;
            claim(CT_Require)(v2345, Just "sender correct");
            const netBalance/2349 : UInt* = netBalance/2382;
            const netBalance/2350 : UInt* = netBalance/2382;
            const v2351 : Bool* = netBalance/2349 <= netBalance/2350;
            claim(CT_Assert)(v2351, Just "balance sufficient for transfer");
            const netBalance/2352 : UInt* = netBalance/2382;
            const v2353 : UInt* = netBalance/2352 - netBalance/2349;
            transfer.(netBalance/2349, None).to(Admin/46);
            const tokInfo/2971 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[0];
            const v2354 : UInt* = tokInfo/2971[0];
            const tokInfo/2972 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[0];
            const v2355 : UInt* = tokInfo/2972[0];
            const v2356 : Bool* = v2354 <= v2355;
            claim(CT_Assert)(v2356, Just "balance sufficient for transfer");
            const tokInfo/2973 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[0];
            const v2357 : UInt* = tokInfo/2973[0];
            const v2358 : UInt* = v2357 - v2354;
            const tokInfo/2974 : Tuple(UInt, UInt, Bool)* = tokenInfos/2380[0];
            const tokInfo'/2976 : Tuple(UInt, UInt, Bool)* = Tuple.set(tokInfo/2974, 0, v2358 );
            const tokInfos'/2975 : Array(Tuple(UInt, UInt, Bool), 1)* = Array.set(tokenInfos/2380, 0, tokInfo'/2976 );
            transfer.(v2354, Some deposit_nft/48).to(Admin/46);
            const netBalance/2359 : UInt* = v2353;
            const v2360 : Bool* = 0 == netBalance/2359;
            claim(CT_Assert)(v2360, Just "balance zero at application exit");
            const tokInfo/2977 : Tuple(UInt, UInt, Bool)* = tokInfos'/2975[0];
            const v2361 : UInt* = tokInfo/2977[0];
            const v2362 : Bool* = 0 == v2361;
            claim(CT_Assert)(v2362, Just "balance zero at application exit");
            commit();
            exit(); }
           }
       }
  